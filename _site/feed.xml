<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-02T21:54:13+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">imod</title><subtitle>lazycat&lt;br/&gt;
&lt;a href=&quot;mailto:verylazycat@outlook.com&quot;&gt;
  &lt;i class=&quot;fas fa-envelope&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
&lt;a href=&quot;https://github.com/verylazycat&quot;&gt;
  &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
&lt;iframe
  src=&quot;&quot;
  width=100%
  height=52
  frameborder=&quot;no&quot;
  border=&quot;0&quot;
  marginwidth=&quot;0&quot;
  marginheight=&quot;0&quot;
&gt;&lt;/iframe&gt;
</subtitle><entry><title type="html">jdbc笔记</title><link href="http://localhost:4000/_posts/2020-05-02-jdbc%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="jdbc笔记" /><published>2020-05-02T00:00:00+08:00</published><updated>2020-05-02T00:00:00+08:00</updated><id>http://localhost:4000/_posts/jdbc%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-02-jdbc%E7%AC%94%E8%AE%B0/">&lt;h2 id=&quot;jdbc笔记&quot;&gt;jdbc笔记&lt;/h2&gt;

&lt;h4 id=&quot;jdbc双层架构&quot;&gt;jdbc双层架构&lt;/h4&gt;

&lt;h4&gt;&lt;img src=&quot;/img/jdbc1.png&quot; alt=&quot;jdbc1&quot; /&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;作用：此架构中，Java Applet 或应用直接访问数据源。&lt;/li&gt;
  &lt;li&gt;条件:要求 Driver 能与访问的数据库交互&lt;/li&gt;
  &lt;li&gt;机制:用户命令传给数据库或其他数据源，随之结果被返回。&lt;/li&gt;
  &lt;li&gt;部署:数据源可以在另一台机器上，用户通过网络连接，称为 C/S配置（可以是内联网或互联网）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;jdbc三层架构&lt;img src=&quot;/img/jdbc2.png&quot; alt=&quot;jdbc2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;侧架构特殊之处在于，引入中间层服务.&lt;/p&gt;

&lt;p&gt;流程：命令和结构都会经过该层。&lt;/p&gt;

&lt;p&gt;吸引：可以增加企业数据的访问控制，以及多种类型的更新；另外，也可简化应用的部署，并在多数情况下有性能优势。&lt;/p&gt;

&lt;p&gt;历史趋势： 以往，因性能问题，中间层都用 C 或 C++ 编写，随着优化编译器（将 Java 字节码 转为 高效的  特定机器码）和技术的发展，如EJB，Java 开始用于中间层的开发这也让 Java 的优势突显出现出来，使用 Java  作为服务器代码语言，JDBC随之被重视。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;步骤&quot;&gt;步骤&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;加载驱动&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;建立连接&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Connection  conn = DriverManager.getConnection(URL,USER,PASSWORD);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;执行sql&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String sql = &quot;select * from details&quot;;
注意没有分号
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;结果&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;while(rs.next()){
                    System.out.println(rs.getString(&quot;字段&quot;));
                }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;释放资源&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;rs.close();
conn.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.sql.*;

public class mysqltest {
    public static final String URL = &quot;jdbc:mysql://localhost:3306/cov&quot;;
    public static  final  String USER = &quot;admin&quot;;
    public static final String PASSWORD = &quot;admin&quot;;
    public static void main(String[] args) {
       //加载驱动
        try {
            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
            Connection conn = null;
            try {
                conn = DriverManager.getConnection(URL,USER,PASSWORD);
                System.out.println(&quot;连接成功&quot;);
                Statement statement = conn.createStatement();
                String sql = &quot;select * from details&quot;;
                ResultSet rs;
                rs = statement.executeQuery(sql);
                while(rs.next()){
                    System.out.println(rs.getString(&quot;city&quot;));
                }
                rs.close();
                conn.close();
            } catch (SQLException throwables) {
                System.out.println(&quot;连接失败&quot;);
                throwables.printStackTrace();
            }
        } catch (ClassNotFoundException e) {
            System.out.println(&quot;驱动加载失败&quot;);
            e.printStackTrace();
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;外部配置信息建立连接&quot;&gt;外部配置信息建立连接&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;在resource下新建文件mysqlproperties&quot;&gt;在resource下新建文件&lt;code&gt;mysql.properties&lt;/code&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/cov
user=admin
password=admin
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;配置文件读取&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Properties properties = new Properties();
        FileInputStream inputStream = new FileInputStream(&quot;resource/mysql.properties&quot;);  //注意路径
        properties.load(inputStream);

        String driver = properties.getProperty(&quot;driver&quot;);
        String url = properties.getProperty(&quot;url&quot;);
        String user = properties.getProperty(&quot;user&quot;);
        String pwd=properties.getProperty(&quot;password&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取配置信息更好方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;//通过反射
InputStream inputStream = this(当前类的Class对象).getResourceAsStream(&quot;/mysql.properties&quot;); 
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="jdbc笔记" /><summary type="html">jdbc笔记</summary></entry><entry><title type="html">sql-server复习</title><link href="http://localhost:4000/_posts/2020-05-02-sql-server%E5%A4%8D%E4%B9%A0%E4%B8%80/" rel="alternate" type="text/html" title="sql-server复习" /><published>2020-05-02T00:00:00+08:00</published><updated>2020-05-02T00:00:00+08:00</updated><id>http://localhost:4000/_posts/sql-server%E5%A4%8D%E4%B9%A0%E4%B8%80</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-02-sql-server%E5%A4%8D%E4%B9%A0%E4%B8%80/">&lt;h2 id=&quot;sql-server复习一&quot;&gt;sql-server复习一&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;基础概念&quot;&gt;基础概念&lt;/h4&gt;

    &lt;ol&gt;
      &lt;li&gt;数据库(Data)&lt;/li&gt;
      &lt;li&gt;数据库(Database)&lt;/li&gt;
      &lt;li&gt;数据库管理系统(DBMS)&lt;/li&gt;
      &lt;li&gt;数据库系统(DBS)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据库系统组成&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;数据库&lt;/li&gt;
      &lt;li&gt;数据库管理系统&lt;/li&gt;
      &lt;li&gt;应用程序&lt;/li&gt;
      &lt;li&gt;数据库管理员&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DBMS主要功能&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;数据库的定义功能:定义语言DDL来定义数据库的三级结构、两级映象，定义数据的完整性约束、保密限制等约束&lt;/li&gt;
      &lt;li&gt;数据库的操纵功能：操纵语言DML实现对数据的基本操作，数据查询和数据更新&lt;/li&gt;
      &lt;li&gt;数据库的保护功能：数据库恢复、数据库的并发控制、数据完整性控制、数据安全性控制&lt;/li&gt;
      &lt;li&gt;数据库的维护功能：数据库的数据载入、转换、转储、数据库的改组以及性能监控工能&lt;/li&gt;
      &lt;li&gt;数据字典（DD）：对数据库的操作都要通过DD才能实现，DD还存放数据库运行时的统计信息&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据库管理员(DBA)职责&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;决定数据库中的信息内容和结构：数据库中要存放哪些信息，DBA要参与决策&lt;/li&gt;
      &lt;li&gt;决定数据库的存储结构和存取策略：DBA要综合各用户的应用要求，和数据库设计人员共同决定数据的存储结构和存取策略，以求获得较高的存取效率和存储空间利用率&lt;/li&gt;
      &lt;li&gt;定义数据的安全性要求和完整性约束条件：DBA的重要职责是保证数据库的安全性和完整性&lt;/li&gt;
      &lt;li&gt;监控数据库的使用和运行：DBA还有一个重要职责就是监视数据库系统的运行情况，及时处理运行过程中出现的问题。比如系统发生各种故障时，数据库会因此遭到不同程度的破坏，DBA必须在最短时间内将数据库恢复到正确状态，并尽可能不影响或少影响计算机系统其他部分的正常运行&lt;/li&gt;
      &lt;li&gt;数据库的改进、重组或重构：DBA还负责在系统运行期间监视系统的空间利用率、处理效率等性能指标，对运行情况进行记录、统计分析，依靠工作实践并根据实际应用环境，不断改进数据库设计&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;三级模式体系结构&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;外部级（External）&lt;/li&gt;
      &lt;li&gt;概念级（Conceptual）&lt;/li&gt;
      &lt;li&gt;内部级（Internal）&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;模式/内模式映像
由于这两级的数据结构可能不一致，即记录类型、字段类型的命名和组成可能不一样，因此需要这个映像说明概念记录和内部记录之间的对应性。模式/内模式映像一般是放在内模式中描述的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;外模式/模式映像
 外模式/模式映像一般是放在外模式中描述的。三级模式结构中，模式即全局逻辑结构是数据库的中心与关键，它独立于其他层次。因此设计数据库模式结构时应首先确定数据库的逻辑模式&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据独立性（Data Independence）&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;物理数据独立性
如果数据库的内模式要修改，即数据库的物理结构有所变化，那么只要对模式/内模式映像做相应的修改即可。&lt;/li&gt;
      &lt;li&gt;逻辑数据独立性  &lt;br /&gt;
   如果数据库的概念模式要修改，譬如增加记录类型或增加数据项，那么只要对外模式/模式映像做相应的修改，可以使外模式和应用程序尽可能保持不变。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据处理的三个阶段&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;概念数据模型：&lt;/p&gt;

        &lt;p&gt;独立于计算机系统的数据模型，完全不涉及信息在计算机中的表示，只是用来描述某个特定组织所关心的信息结构&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;逻辑数据模型：&lt;/p&gt;

        &lt;p&gt;是直接面向数据库的逻辑结构，它是对现实世界的第二层抽象。这类模型直接与DBMS有关，简称“逻辑模型”。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;ER&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ER（实体─联系方法）图提供了表示实体型、属性和联系的方法：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;实体型：用矩形表示，矩形框内写明实体名。&lt;/li&gt;
      &lt;li&gt;属性：用椭圆形表示，并用无向边将其与相应的实体型连接起来。&lt;img src=&quot;/img/er.png&quot; alt=&quot;er&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;联系：用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体型连接起来，同时在无向边旁标上联系的类型（1:1，1:N或M:N）&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;&lt;img src=&quot;/img/联系.png&quot; alt=&quot;联系&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;二元联系主&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;一对一联系（1:1）：如果对于实体集A中的每一个实体，实体集B中至多有一个（也可以没有）实体与之联系，反之亦然，则称实体集A与实体集B具有一对一联系，记为l:1&lt;/li&gt;
      &lt;li&gt;一对多联系（1:N）：如果对于实体集A中的每一个实体，实体集B中有N（N≥0）个实体与之联系，反之，对于实体集B中的每一个实体，实体集A中至多只有一个实体与之联系，则称实体集A与实体集B有一对多联系，记为1:N&lt;/li&gt;
      &lt;li&gt;多对多联系（M:N）：如果对于实体集A中的每一个实体，实体集B中有N（N≥0）个实体与之联系，反之，对于实体集B中的每一个实体，实体集A中也有M（M≥0）个实体与之联系，则称实体集A与实体集B具有多对多联系，记为M:N&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;三元联系和一元联系&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;三元联系是三个实体之间的联系，这些实体之间也存在着一对一、一对多或多对多的联系。例如，对于课程、教师与参考书3个实体，如果一门课程可以有多个教师讲授，使用若干本参考书，而每一个教师只讲授一门课程，每一本参考书只供一门课程使用，则课程与教师、参考书之间的联系是一对多的&lt;/li&gt;
  &lt;li&gt;同一个实体集内的各实体之间也可以存在一对一、一对多、多对多的联系，称为一元联系。例如，一个公司的所有员工组成的实体集内部具有领导与被领导的联系，即某一员工（经理）领导若干名员工，而一个员工仅被另外一个员工（经理）直接领导，因此这是一对多的联&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;逻辑模型&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;在数据库系统中，传统的逻辑模型有层次模型、网状模型和关系模型三种，非传统的逻辑模型有面向对象模型（Object-Oriented model，OO）&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;逻辑模型中的数据描述&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;字段（field）：标记实体属性的命名单位称为字段或数据项。字段的命名往往和属性名相同。例如学生有学号、姓名、性别、年龄等字段。&lt;/li&gt;
      &lt;li&gt;记录（record）：字段的有序集合称为记录。一般用一个记录描述一个实体，所以记录又可以定义为能完整地描述一个实体的字段集。&lt;/li&gt;
      &lt;li&gt;文件（file）： 同一类记录的集合称为文件。文件是用来描述实体集的。
关键码（key）： 能惟一标识文件中每个记录的字段或字段集，称为记录的关键码（简称为键）&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;层次数据模型的数据结构&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;在数据库中定义满足下面两个条件的基本层次联系的集合为层次模型。有且只有一个结点没有双亲结点，这个结点称为根结点；&lt;/li&gt;
      &lt;li&gt;根以外的其他结点有且只有一个双亲结点&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;层次模型的优点&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;层次模型的数据结构比较简单清晰。&lt;/li&gt;
      &lt;li&gt;层次数据库的查询效率高。因为层次模型中记录之间的联系用有向边表示，这种联系在DBMS中常常用指针来实现。因此这种联系也就是记录之间的存取路径。当要存取某个结点的记录值，DBMS就沿着这一条路径很快找到该记录值，所以，层次数据库的查询性能优于关系数据库，不低于网状数据库。&lt;/li&gt;
      &lt;li&gt;层次数据模型提供了良好的完整性支持。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;层次模型的缺点&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;现实世界中很多联系是非层次型的，如结点之间具有多对多联系。&lt;/li&gt;
      &lt;li&gt;一个结点具有多个双亲等，层次模型表示这类联系的方法很笨拙，只能通过引入冗余数据（易产生不一致性）或创建非自然的数据结构（引入虚拟结点）来解决。对插入和删除操作的限制比较多，因此应用程序的编写比较复杂。&lt;/li&gt;
      &lt;li&gt;查询子女结点必须通过双亲结点。&lt;/li&gt;
      &lt;li&gt;由于结构严密，层次命令趋于程序化&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网状数据模型的数据结构&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;在数据库中，把满足以下两个条件的基本层次联系集合称为网状模型：允许一个以上的结点无双亲；一个结点可以有多于一个的双亲。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网状数据模型的优点&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;能够更为直接地描述现实世界，如一个结点可以有多个双亲。结点之间可以有多种联系。&lt;/li&gt;
      &lt;li&gt;具有良好的性能，存取效率较高&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网状数据模型的缺点&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握。&lt;/li&gt;
      &lt;li&gt;网状模型的DDL、DML复杂，并且要嵌入某一种高级语言（如COBOL、C）中。因此用户不易掌握和使用。&lt;/li&gt;
      &lt;li&gt;由于记录之间的联系是通过存取路径实现的，应用程序在访问数据时必须选择适当的存取路径，因此，用户必须了解系统结构的细节。这样就加重了编写应用程序的负担&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关系数据模型的数据结构&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;关系（Relation）： 一个关系对应通常说的一张表，如表2.2中的这张学生登记表。元组（Tuple） 表中的一行即为一个元组。&lt;/li&gt;
      &lt;li&gt;属性（Attribute）： 表中的一列即为一个属性，给每一个属性起一个名称即属性名。如这张表有6列，对应6个属性：学号，姓名，年龄，性别，系名和年级。&lt;/li&gt;
      &lt;li&gt;码（Key）： 也称为码键。表中的某个属性组，它可以惟一确定一个元组，如表2.2中的学号，可以惟一确定一个学生，也就成为本关系的码。&lt;/li&gt;
      &lt;li&gt;域（Domain）： 属性的取值范围，如人的年龄一般在1～150岁之间，大学生年龄属性的域是（14～38），性别的域是（男，女），系名的域是一个学校所有系名的集合。分量 元组中的一个属性值。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关系模式&lt;/p&gt;

    &lt;p&gt;关系名（属性l，属性2，…，属性n）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关系数据模型优点&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;关系模型与非关系模型不同，它是建立在严格的数学概念的基础上的。&lt;/li&gt;
      &lt;li&gt;关系模型的概念单一。无论实体还是实体之间的联系都用关系来表示。对数据的检索和更新结果也是关系（即表）。所以其数据结构简单、清晰，用户易懂易用。&lt;/li&gt;
      &lt;li&gt;关系模型的存取路径对用户透明，从而具有更高的数据独立性、更好的安全保密性，也简化了程序员的工作和数据库开发建立的工作&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关系数据模型缺点&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;由于存取路径对用户透明，查询效率往往不如非关系数据模型。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;面向对象模型&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;对象（Object）： 对象是现实世界中实体的模型化，与记录概念相仿，但远比记录复杂。每个对象有一个惟一的标识符，把状态（State）和行为（Behavior）封装（Encapsulate）在一起。其中，对象的状态是该对象属性值的集合，对象的行为是在对象状态上操作的方法集。&lt;/li&gt;
      &lt;li&gt;类（Class）： 将属性集和方法集相同的所有对象组合在一起，构成了一个类。类的属性值域可以是基本数据类型（整型、实型、字符串型），也可以是记录类型和集合类型。也就是类可以有嵌套结构。系统中所有的类组成了一个有根的有向无环图，叫类层次&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;面向对象数据库系统的优点&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;能有效地表达客观世界和有效地查询信息：面向对象方法综合了在关系数据库中发展的全部工程原理、系统分析、软件工程和专家系统领域的内容。&lt;/li&gt;
      &lt;li&gt;可维护性好：在耦合性和内聚性方面，面向对象数据模型的性能尤为突出。&lt;/li&gt;
      &lt;li&gt;能很好地解决“阻抗不匹配”（impedance mismatch）问题：应用程序语言与数据库管理系统对数据类型支持的不一致问题，这一问题通常称之为阻抗不匹配问题&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;面向对象数据库系统的缺点&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;技术还不成熟：面向对象模型还存在着标准化问题，是否修改SQL以适应面向对象的程序，还是用新的对象查询语言来代替它，目前还没有解决。&lt;/li&gt;
      &lt;li&gt;面向对象系统开发的有关原理才刚开始，只是具有雏形，还需要一段时间的研究。但在可靠性、成本等方面还是令人可以接受的。&lt;/li&gt;
      &lt;li&gt;理论还需完善：到现在为止没有关于面向对象分析的一套清晰的概念模型，怎样设计独立于物理存储的信息还不明确&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="sql-server复习" /><summary type="html">sql-server复习一</summary></entry><entry><title type="html">软件工程理论与实践（三）</title><link href="http://localhost:4000/_posts/2020-04-26-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E4%B8%89/" rel="alternate" type="text/html" title="软件工程理论与实践（三）" /><published>2020-04-26T00:00:00+08:00</published><updated>2020-04-26T00:00:00+08:00</updated><id>http://localhost:4000/_posts/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5(%E4%B8%89)</id><content type="html" xml:base="http://localhost:4000/_posts/2020-04-26-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E4%B8%89/">&lt;h2 id=&quot;uml-中活动图是在用在生命周期中的哪个阶段的用来做什么的有几个图形符号画出来它们表示什么含义&quot;&gt;UML 中活动图是在用在生命周期中的哪个阶段的、用来做什么的、有几个图形符号(画出来)、它们表示什么含义&lt;/h2&gt;

&lt;p&gt;活动图在用例规约阶段，用来写用例的流程（主流程、备选流程），有六个符号：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;实心圆圈：表示开始节点与结束节点&lt;/li&gt;
  &lt;li&gt;圆边矩形：表示 state&lt;/li&gt;
  &lt;li&gt;圆角矩形：表示 state&lt;/li&gt;
  &lt;li&gt;实心条：表示同步&lt;/li&gt;
  &lt;li&gt;缺角矩形：表示注释&lt;/li&gt;
  &lt;li&gt;菱形：表示判断&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;根据你自己的理解uml-对于软件项目的成功有什么价值写出-3-5-条&quot;&gt;根据你自己的理解，UML 对于软件项目的成功有什么价值？（写出 3-5 条）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;把抽象的项目需求转换为直白的模型&lt;/li&gt;
  &lt;li&gt;可以清楚地把项目表现给客户&lt;/li&gt;
  &lt;li&gt;便于后期维护&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;画完用例图你要进行复审一般你检查哪些内容写出-3-5-条&quot;&gt;画完用例图，你要进行复审，一般你检查哪些内容？（写出 3-5 条）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;所有用例是否出现&lt;/li&gt;
  &lt;li&gt;关系的对应关系是否正确&lt;/li&gt;
  &lt;li&gt;是否表达清晰&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;actor-表示角色其是外部环境怎样理解&quot;&gt;Actor 表示角色，其是“外部环境”，怎样理解&lt;/h2&gt;

&lt;p&gt;Actor 是指系统外的，在使用系统或与系统交互中所扮演的角色，所以不是系统内部的，算是外部条件&lt;/p&gt;</content><author><name></name></author><category term="软件工程理论与实践" /><summary type="html">UML 中活动图是在用在生命周期中的哪个阶段的、用来做什么的、有几个图形符号(画出来)、它们表示什么含义 活动图在用例规约阶段，用来写用例的流程（主流程、备选流程），有六个符号： 实心圆圈：表示开始节点与结束节点 圆边矩形：表示 state 圆角矩形：表示 state 实心条：表示同步 缺角矩形：表示注释 菱形：表示判断 根据你自己的理解，UML 对于软件项目的成功有什么价值？（写出 3-5 条） 把抽象的项目需求转换为直白的模型 可以清楚地把项目表现给客户 便于后期维护 画完用例图，你要进行复审，一般你检查哪些内容？（写出 3-5 条） 所有用例是否出现 关系的对应关系是否正确 是否表达清晰 Actor 表示角色，其是“外部环境”，怎样理解 Actor 是指系统外的，在使用系统或与系统交互中所扮演的角色，所以不是系统内部的，算是外部条件</summary></entry></feed>