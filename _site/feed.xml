<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-15T19:22:52+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">imod</title><subtitle>lazycat&lt;br/&gt;
&lt;a href=&quot;mailto:verylazycat@outlook.com&quot;&gt;
  &lt;i class=&quot;fas fa-envelope&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
&lt;a href=&quot;https://github.com/verylazycat&quot;&gt;
  &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;
&lt;/a&gt;
</subtitle><entry><title type="html">Docker笔记</title><link href="http://localhost:4000/_posts/2020-05-15-Docker%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="Docker笔记" /><published>2020-05-15T00:00:00+08:00</published><updated>2020-05-15T00:00:00+08:00</updated><id>http://localhost:4000/_posts/Docker%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-15-Docker%E7%AC%94%E8%AE%B0/">&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;官网&quot;&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;官网&lt;/a&gt;&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;安装教程&quot;&gt;&lt;a href=&quot;https://hub.docker.com/search?q=&amp;amp;type=edition&amp;amp;offering=community&amp;amp;operating_system=linux&quot;&gt;安装教程&lt;/a&gt;&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;基础命令&quot;&gt;基础命令&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Usage:	docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           &quot;/home/yourname/.docker&quot;)
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with &quot;docker context use&quot;)
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;)
                           (default &quot;info&quot;)
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           &quot;/home/yourname/.docker/ca.pem&quot;)
      --tlscert string     Path to TLS certificate file (default
                           &quot;/home/yourname/.docker/cert.pem&quot;)
      --tlskey string      Path to TLS key file (default
                           &quot;/home/yourname/.docker/key.pem&quot;)
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  engine      Manage the docker engine
  image       Manage images
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  deploy      Deploy a new stack or update an existing stack
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes
Run 'docker COMMAND --help' for more information on a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;docker--for-ubuntu-images&quot;&gt;Docker  For Ubuntu Images&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;网站&quot;&gt;&lt;a href=&quot;https://hub.docker.com/_/ubuntu?tab=tags&amp;amp;page=1&quot;&gt;网站&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;拉取最新版的-ubuntu-镜像&quot;&gt;拉取最新版的 Ubuntu 镜像&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull ubuntu:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;查看本地镜像&quot;&gt;查看本地镜像&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;删除镜像&quot;&gt;删除镜像&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;docker rmi &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;构建镜像&quot;&gt;构建镜像&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;docker build &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;需要创建一个 &lt;code&gt;Dockerfile&lt;/code&gt; 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;FROM    centos:6.7
MAINTAINER      Fisher &quot;fisher@sudops.com&quot;

RUN     /bin/echo 'root:123456' |chpasswd
RUN     useradd runoob
RUN     /bin/echo 'runoob:123456' |chpasswd
RUN     /bin/echo -e &quot;LANG=\&quot;en_US.UTF-8\&quot;&quot; &amp;gt;/etc/default/local
EXPOSE  22
EXPOSE  80
CMD     /usr/sbin/sshd -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。&lt;/p&gt;

&lt;p&gt;第一条FROM，指定使用哪个镜像源&lt;/p&gt;

&lt;p&gt;RUN 指令告诉docker 在镜像内执行命令，安装了什么。。。&lt;/p&gt;

&lt;p&gt;然后，我们使用&lt;code&gt;Dockerfile&lt;/code&gt; 文件，通过 &lt;code&gt;docker build&lt;/code&gt; 命令来构建一个镜像&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; docker build -t runoob/centos:6.7 .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Sending build context to Docker daemon 17.92 kB
Step 1 : FROM centos:6.7
 ---&amp;amp;gt; d95b5ca17cc3
Step 2 : MAINTAINER Fisher &quot;fisher@sudops.com&quot;
 ---&amp;amp;gt; Using cache
 ---&amp;amp;gt; 0c92299c6f03
Step 3 : RUN /bin/echo 'root:123456' |chpasswd
 ---&amp;amp;gt; Using cache
 ---&amp;amp;gt; 0397ce2fbd0a
Step 4 : RUN useradd runoob
......
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;-t&lt;/strong&gt; ：指定要创建的目标镜像名&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.&lt;/strong&gt; ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;查看端口的绑定情况&quot;&gt;查看端口的绑定情况&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;docker port &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;运行容器&quot;&gt;运行容器&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -itd --name ubuntu-test ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;exec-命令进入-ubuntu-容器&quot;&gt;exec 命令进入 ubuntu 容器&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker exec -it ubuntu-test /bin/bas
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;运行交互式的容器&quot;&gt;运行交互式的容器&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -i -t docker_image /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt;在新容器内指定一个伪终端或终端&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-i&lt;/code&gt;允许你对容器内的标准输入 (&lt;code&gt;STDIN&lt;/code&gt;) 进行交互&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;docker-ps&quot;&gt;docker ps&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;CONTAINER ID&lt;/strong&gt;:容器 ID&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IMAGE:&lt;/strong&gt; 使用的镜像&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;COMMAND:&lt;/strong&gt; 启动容器时运行的命令&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CREATED:&lt;/strong&gt; 容器的创建时间&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;STATUS:&lt;/strong&gt; 容器状态
    &lt;ol&gt;
      &lt;li&gt;created（已创建）&lt;/li&gt;
      &lt;li&gt;restarting（重启中）&lt;/li&gt;
      &lt;li&gt;running（运行中）&lt;/li&gt;
      &lt;li&gt;removing（迁移中）&lt;/li&gt;
      &lt;li&gt;paused（暂停）&lt;/li&gt;
      &lt;li&gt;exited（停止）&lt;/li&gt;
      &lt;li&gt;dead（死亡）&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PORTS:&lt;/strong&gt; 容器的端口信息和使用的连接类型（tcp\udp）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NAMES:&lt;/strong&gt; 自动分配的容器名称&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;停止容器&quot;&gt;停止容器&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker stop CONTAINER ID
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;重启容器&quot;&gt;重启容器&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; docker restart CONTAINER ID
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;进入容器&quot;&gt;进入容器&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在使用 &lt;strong&gt;-d&lt;/strong&gt; 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker attach  CONTAINER ID
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker exec -it CONTAINER ID /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;推荐使用 &lt;code&gt;docker exec&lt;/code&gt; 命令，因为此退出容器终端，不会导致容器的停止。&lt;/p&gt;

&lt;p&gt;更多参数说明请使用 &lt;code&gt;docker exec --help&lt;/code&gt; 命令查看&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;导出容器&quot;&gt;&lt;strong&gt;导出容器&lt;/strong&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker export  CONTAINER ID &amp;gt; dockername.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;导入容器快照&quot;&gt;&lt;strong&gt;导入容器快照&lt;/strong&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cat docker/ubuntu.tar | docker import - test/ubuntu:v1
也可以通过指定 URL 或者某个目录来导入
docker import http://example.com/exampleimage.tgz example/imagerepo
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;删除容器&quot;&gt;删除容器&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker rm -f CONTAINER ID
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;运行一个-web-应用flask&quot;&gt;运行一个 web 应用(Flask)&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull training/webapp  # 载入镜像
docker run -d -P training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-d:&lt;/strong&gt;让容器在后台运行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-P:&lt;/strong&gt;将容器内部使用的网络端口映射到我们使用的主机上&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;查看-web-应用程序日志&quot;&gt;查看 WEB 应用程序日志&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker logs -f  CONTAINER ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-f:&lt;/strong&gt; 让 &lt;strong&gt;docker logs&lt;/strong&gt; 像使用 &lt;strong&gt;tail -f&lt;/strong&gt; 一样来输出容器内部的标准输出&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;查看web应用程序容器的进程&quot;&gt;查看WEB应用程序容器的进程&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt; docker top&lt;/code&gt; 来查看容器内部运行的进程&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker inspect &lt;/code&gt;查看 Docker 的底层信息&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;停止-web-应用容器&quot;&gt;停止 WEB 应用容器&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;docker stop &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;重启web应用容器&quot;&gt;重启WEB应用容器&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;docker start&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;移除web应用容器&quot;&gt;移除WEB应用容器&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt; docker rm&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><category term="linux" /><summary type="html">Docker</summary></entry><entry><title type="html">类加载</title><link href="http://localhost:4000/_posts/2020-05-13-%E7%B1%BB%E5%8A%A0%E8%BD%BD/" rel="alternate" type="text/html" title="类加载" /><published>2020-05-13T00:00:00+08:00</published><updated>2020-05-13T00:00:00+08:00</updated><id>http://localhost:4000/_posts/%E7%B1%BB%E5%8A%A0%E8%BD%BD</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-13-%E7%B1%BB%E5%8A%A0%E8%BD%BD/">&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;类加载&quot;&gt;类加载&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在java代码中，&lt;code&gt;类型&lt;/code&gt;的&lt;code&gt;加载&lt;/code&gt;，&lt;code&gt;连接&lt;/code&gt;，&lt;code&gt;初始化&lt;/code&gt;过程都是在程序运行期间完成的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;java结束生命周期&quot;&gt;java结束生命周期&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;执行System.exit()&lt;/li&gt;
  &lt;li&gt;程序正常结束&lt;/li&gt;
  &lt;li&gt;异常或错误&lt;/li&gt;
  &lt;li&gt;操作系统出错&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;类的加载连接初始化&quot;&gt;类的加载，连接，初始化&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;加载：查找并加载类的二进制数据，将class文件的二进制数据读入内存，将其放到运行时数据区的方法区内，然后在内存中创建一个java.lang.Class对象来封装类在方法区内的数据结构&lt;/li&gt;
  &lt;li&gt;连接：
    &lt;ol&gt;
      &lt;li&gt;验证：确保加载类的准确性&lt;/li&gt;
      &lt;li&gt;准备：为类的&lt;code&gt;静态变量&lt;/code&gt;分配内存，并初始胡为&lt;code&gt;默认值&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;解析：把类中的&lt;code&gt;符号引用&lt;/code&gt;转换为&lt;code&gt;直接引用&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;初始化:&lt;code&gt;为静态变量赋初始值&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;类的使用&quot;&gt;类的使用&lt;/h2&gt;

    &lt;ol&gt;
      &lt;li&gt;主动使用
        &lt;ol&gt;
          &lt;li&gt;创建类的实例&lt;/li&gt;
          &lt;li&gt;访问类或者接口静态变量(getstatice)，或者对静态变量赋值(putstatice)&lt;/li&gt;
          &lt;li&gt;调用静态方法(invokestatic)&lt;/li&gt;
          &lt;li&gt;反射&lt;/li&gt;
          &lt;li&gt;初始化类的子类&lt;/li&gt;
          &lt;li&gt;java虚拟机启动时被标明的启动类&lt;/li&gt;
          &lt;li&gt;动态语言支持&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;被动使用&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="JVM" /><summary type="html">类加载</summary></entry><entry><title type="html">置换密码</title><link href="http://localhost:4000/_posts/2020-05-13-%E7%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81/" rel="alternate" type="text/html" title="置换密码" /><published>2020-05-13T00:00:00+08:00</published><updated>2020-05-13T00:00:00+08:00</updated><id>http://localhost:4000/_posts/%E7%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-13-%E7%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81/">&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;置换密码&quot;&gt;置换密码&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例:设有限集X = {1,2,3,4,5,6,7,8},σ 为X 上的一个置换,满足σ(1)=2,σ(2)=5,σ(3)=3,σ(4)=6,σ(5)=1,σ(6)=8,σ(7)=4,σ(8)=7,其置换可表示为如下:
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\sigma =
\left\{
 \begin{matrix}
1&amp;2&amp;3&amp;4&amp;5&amp;6&amp;7&amp;8\\
2&amp;5&amp;3&amp;6&amp;1&amp;8&amp;4&amp;7
  \end{matrix}
  \right\}
  =(125)(3)(4687)
  =(125)(4687) %]]&gt;&lt;/script&gt;
其逆为：
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\sigma^{-1}=
\left\{
 \begin{matrix}
1&amp;2&amp;3&amp;4&amp;5&amp;6&amp;7&amp;8\\
2&amp;5&amp;3&amp;6&amp;1&amp;8&amp;4&amp;7
  \end{matrix}
  \right\}^{-1}
  =
  \left\{
  \begin{matrix}
  1&amp;2&amp;3&amp;4&amp;5&amp;6&amp;7&amp;8\\
  5&amp;1&amp;3&amp;7&amp;2&amp;4&amp;8&amp;6
  \end{matrix}
  \right\}
  =
  (125)(3)(4786)=(152)(4786) %]]&gt;&lt;/script&gt;&lt;/p&gt;</content><author><name></name></author><category term="安全" /><summary type="html">置换密码</summary></entry><entry><title type="html">sql-server常用命令总结</title><link href="http://localhost:4000/_posts/2020-05-12-sql-server%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/" rel="alternate" type="text/html" title="sql-server常用命令总结" /><published>2020-05-12T00:00:00+08:00</published><updated>2020-05-12T00:00:00+08:00</updated><id>http://localhost:4000/_posts/sql-server%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-12-sql-server%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/">&lt;ol&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;部分语句模板&quot;&gt;部分语句模板&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;创建数据库&quot;&gt;创建数据库&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Create a new database called 'DatabaseName'
-- Connect to the 'master' database to run this snippet
USE master
GO
-- Create the new database if it does not exist already
IF NOT EXISTS (
    SELECT name
        FROM sys.databases
        WHERE name = N'DatabaseName'
)
CREATE DATABASE DatabaseName
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;创建表&quot;&gt;创建表&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Create a new table called 'TableName' in schema 'SchemaName'
-- Drop the table if it already exists
IF OBJECT_ID('SchemaName.TableName', 'U') IS NOT NULL
DROP TABLE SchemaName.TableName
GO
-- Create the table in the specified schema
CREATE TABLE SchemaName.TableName
(
    TableNameId INT NOT NULL PRIMARY KEY, -- primary key column
    Column1 [NVARCHAR](50) NOT NULL,
    Column2 [NVARCHAR](50) NOT NULL
    -- specify more columns here
);
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;创建存储过程&quot;&gt;创建存储过程&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Create a new stored procedure called 'StoredProcedureName' in schema 'SchemaName'
-- Drop the stored procedure if it already exists
IF EXISTS (
SELECT *
    FROM INFORMATION_SCHEMA.ROUTINES
WHERE SPECIFIC_SCHEMA = N'SchemaName'
    AND SPECIFIC_NAME = N'StoredProcedureName'
)
DROP PROCEDURE SchemaName.StoredProcedureName
GO
-- Create the stored procedure in the specified schema
CREATE PROCEDURE SchemaName.StoredProcedureName
    @param1 /*parameter name*/ int /*datatype_for_param1*/ = 0, /*default_value_for_param1*/
    @param2 /*parameter name*/ int /*datatype_for_param1*/ = 0 /*default_value_for_param2*/
-- add more stored procedure parameters here
AS
    -- body of the stored procedure
    SELECT @param1, @param2
GO
-- example to execute the stored procedure we just created
EXECUTE SchemaName.StoredProcedureName 1 /*value_for_param1*/, 2 /*value_for_param2*/
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;创建视图&quot;&gt;创建视图&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Create a new view called 'ViewName' in schema 'SchemaName'
-- Drop the view if it already exists
IF EXISTS (
SELECT *
    FROM sys.views
    JOIN sys.schemas
    ON sys.views.schema_id = sys.schemas.schema_id
    WHERE sys.schemas.name = N'SchemaName'
    AND sys.views.name = N'ViewName'
)
DROP VIEW SchemaName.ViewName
GO
-- Create the view in the specified schema
CREATE VIEW SchemaName.ViewName
AS
    -- body of the view
    SELECT [Column1],
        [Column2],
        [Column3],
    FROM SchemaName.TableName
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;删除数据库&quot;&gt;删除数据库&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Drop the database 'DatabaseName'
-- Connect to the 'master' database to run this snippet
USE master
GO
-- Uncomment the ALTER DATABASE statement below to set the database to SINGLE_USER mode if the drop database command fails because the database is in use.
-- ALTER DATABASE DatabaseName SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
-- Drop the database if it exists
IF EXISTS (
  SELECT name
   FROM sys.databases
   WHERE name = N'DatabaseName'
)
DROP DATABASE DatabaseName
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;删除表&quot;&gt;删除表&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Drop the table 'TableName' in schema 'SchemaName'
IF EXISTS (
    SELECT *
        FROM sys.tables
        JOIN sys.schemas
            ON sys.tables.schema_id = sys.schemas.schema_id
    WHERE sys.schemas.name = N'SchemaName'
        AND sys.tables.name = N'TableName'
)
    DROP TABLE SchemaName.TableName
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;删除字段&quot;&gt;删除字段&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Drop 'ColumnName' from table 'TableName' in schema 'SchemaName'
ALTER TABLE SchemaName.TableName
    DROP COLUMN ColumnName
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;删除存储过程&quot;&gt;删除存储过程&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Drop the stored procedure called 'StoredProcedureName' in schema 'SchemaName'
IF EXISTS (
SELECT *
    FROM INFORMATION_SCHEMA.ROUTINES
WHERE SPECIFIC_SCHEMA = N'SchemaName'
    AND SPECIFIC_NAME = N'StoredProcedureName'
)
DROP PROCEDURE SchemaName.StoredProcedureName
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;删除视图&quot;&gt;删除视图&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Drop the view 'ViewName' in schema 'SchemaName'
IF EXISTS (
    SELECT *
        FROM sys.views
        JOIN sys.schemas
            ON sys.views.schema_id = sys.schemas.schema_id
    WHERE sys.schemas.name = N'SchemaName'
        AND sys.views.name = N'ViewName'
)
    DROP VIEW SchemaName.ViewName
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;GetHelp&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;/*
mssql getting started:
-----------------------------
1. Change language mode to SQL: Open a .sql file or press Ctrl+K M (Cmd+K M on Mac) and choose 'SQL'.
2. Connect to a database: Press F1 to show the command palette, type 'sqlcon' or 'sql' then click 'Connect'.
3. Use the T-SQL editor: Type T-SQL statements in the editor using T-SQL IntelliSense or type 'sql' to see a list of code snippets you can tweak &amp;amp; reuse.
4. Run T-SQL statements: Press F1 and type 'sqlex' or press Ctrl+Shift+e (Cmd+Shift+e on Mac) to execute all the T-SQL code in the editor.

Tip #1: Put GO on a line by itself to separate T-SQL batches.
Tip #2: Select some T-SQL text in the editor and press `Ctrl+Shift+e` (`Cmd+Shift+e` on Mac) to execute the selection
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;获取空白&quot;&gt;获取空白&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Get the space used by table TableName
SELECT TABL.name AS table_name,
INDX.name AS index_name,
SUM(PART.rows) AS rows_count,
SUM(ALOC.total_pages) AS total_pages,
SUM(ALOC.used_pages) AS used_pages,
SUM(ALOC.data_pages) AS data_pages,
(SUM(ALOC.total_pages)*8/1024) AS total_space_MB,
(SUM(ALOC.used_pages)*8/1024) AS used_space_MB,
(SUM(ALOC.data_pages)*8/1024) AS data_space_MB
FROM sys.tables AS TABL
INNER JOIN sys.indexes AS INDX
ON TABL.object_id = INDX.object_id
INNER JOIN sys.partitions AS PART
ON INDX.object_id = PART.object_id
AND INDX.index_id = PART.index_id
INNER JOIN sys.allocation_units AS ALOC
ON PART.partition_id = ALOC.container_id
WHERE TABL.name LIKE '%TableName%'
AND INDX.object_id &amp;gt; 255
AND INDX.index_id &amp;lt;= 1
GROUP BY TABL.name, 
INDX.object_id,
INDX.index_id,
INDX.name
ORDER BY Object_Name(INDX.object_id),
(SUM(ALOC.total_pages)*8/1024) DESC
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;插入表&quot;&gt;插入表&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Insert rows into table 'TableName'
INSERT INTO TableName
( -- columns to insert data into
 [Column1], [Column2], [Column3]
)
VALUES
( -- first row: values for the columns in the list above
 Column1_Value, Column2_Value, Column3_Value
),
( -- second row: values for the columns in the list above
 Column1_Value, Column2_Value, Column3_Value
)
-- add more rows here
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;查找表&quot;&gt;查找表&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- List columns in all tables whose name is like 'TableName'
SELECT 
    TableName = tbl.TABLE_SCHEMA + '.' + tbl.TABLE_NAME, 
    ColumnName = col.COLUMN_NAME, 
    ColumnDataType = col.DATA_TYPE
FROM INFORMATION_SCHEMA.TABLES tbl
INNER JOIN INFORMATION_SCHEMA.COLUMNS col 
    ON col.TABLE_NAME = tbl.TABLE_NAME
    AND col.TABLE_SCHEMA = tbl.TABLE_SCHEMA

WHERE tbl.TABLE_TYPE = 'BASE TABLE' and tbl.TABLE_NAME like '%TableName%'
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;列举数据库&quot;&gt;列举数据库&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Get a list of databases
SELECT name FROM sys.databases
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;列举当前数据库的表和视图&quot;&gt;列举当前数据库的表和视图&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Get a list of tables and views in the current database
SELECT table_catalog [database], table_schema [schema], table_name name, table_type type
FROM INFORMATION_SCHEMA.TABLES
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;查询&quot;&gt;查询&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Select rows from a Table or View 'TableOrViewName' in schema 'SchemaName'
SELECT * FROM SchemaName.TableOrViewName
WHERE 	/* add search conditions here */
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;更新表里面的数据&quot;&gt;更新表里面的数据&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Update rows in table 'TableName'
UPDATE TableName
SET
    [Colum1] = Colum1_Value,
    [Colum2] = Colum2_Value
    -- add more columns and values here
WHERE 	/* add search conditions here */
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;添加字段&quot;&gt;添加字段&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Add a new column 'NewColumnName' to table 'TableName' in schema 'SchemaName'
ALTER TABLE SchemaName.TableName
    ADD NewColumnName /*new_column_name*/ int /*new_column_datatype*/ NULL /*new_column_nullability*/
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;删除表里面的行数据&quot;&gt;删除表里面的行数据&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;-- Add a new column 'NewColumnName' to table 'TableName' in schema 'SchemaName'
ALTER TABLE SchemaName.TableName
    ADD NewColumnName /*new_column_name*/ int /*new_column_datatype*/ NULL /*new_column_nullability*/
GO
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;详细语句&quot;&gt;详细语句&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;SELECT [ALL|DISTINCT][TOP n[PERCENT]]&amp;lt;目标列表达式&amp;gt;[, … n]    [INTO &amp;lt;新表名&amp;gt;]
FROM &amp;lt;表名&amp;gt;|&amp;lt;视图名&amp;gt;[, … n]
[WHERE &amp;lt;条件表达式&amp;gt;]
[GROUP BY &amp;lt;列名l&amp;gt;
[HAVING &amp;lt;条件表达式&amp;gt;]]
[ORDER BY &amp;lt;列名2&amp;gt;[ASC|DESC]]；  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;ALL：表示输出所有记录，包括重复记录。DISTINCT表示输出无重
复结果的记录。TOP n [PERCENT]指定返回查询结果的前n行数据，如
果指定PERCENT关键字，则返回查询结果的前n%行数据。&lt;/li&gt;
  &lt;li&gt;
    &lt;目标列表达式&gt;：描述结果集的列，它制定了结果集中要包含的列的名称。
&lt;/目标列表达式&gt;
  &lt;/li&gt;
  &lt;li&gt;INTO &lt;新表名&gt;：指定使用结果集来创建新表，&lt;新表名&gt;指定新表的名称。&lt;/新表名&gt;&lt;/新表名&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FROM &lt;表名&gt;|&lt;视图名&gt;：该子句指定从中查询到结果集数据的源表名或源视图名。&lt;/视图名&gt;&lt;/表名&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;WHERE &lt;条件表达式&gt;：该子句是一个筛选条件，它定义了源表或源视图中的行要满足SELECT语句的要求所必须达到的条件。&lt;/条件表达式&gt;&lt;/li&gt;
  &lt;li&gt;GROUP BY &lt;列名l&gt;：该子句将结果按&lt;列名l&gt;的值进行分组，该属性列值相等的元组为一个组，通常需要在每组上取聚集函数值。&lt;/列名l&gt;&lt;/列名l&gt;&lt;/li&gt;
  &lt;li&gt;HAVING &lt;条件表达式&gt;：该子句是应用于结果集的附加筛选，用来向使用GROUP BY子句的查询中添加数据过滤准则。&lt;/条件表达式&gt;&lt;/li&gt;
  &lt;li&gt;ORDER BY &lt;列名2&gt; [ASC|DESC]：该子句定义了结果集中行的排序顺序，升序使用ASC关键字，降序使用DESC关键字，默认为升序。&lt;/列名2&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;确定范围&quot;&gt;确定范围&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;语句BETWEEN…AND…和NOT BETWEEN…AND…可以用来查找属性值在（或不在）指定范围内的元组，其中BETWEEN后是范围的下限（即低值），AND后是范围的上限（即高值）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;确定集合&quot;&gt;确定集合&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;运算符IN可以用来查找属性值属于指定集合的元组
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;字符匹配&quot;&gt;字符匹配&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[NOT] LIKE ’&amp;lt;匹配串&amp;gt;’[ESCAPE ’&amp;lt;换码字符&amp;gt;’]
其含义是查找指定的属性列值与&amp;lt;匹配串&amp;gt;相匹配的元组。&amp;lt;匹配串&amp;gt;可以是一个完整的字符串，也可以含有通配符%和_。其中：
 %（百分号）：代表任意长度（长度可以为0）的字符串。例如a%b表示以a开头，以b结尾的任意长度的字符串。如acb，addgb，ab等都满足该匹配串。
 _（下划线）：代表任意单个字符或汉字。例如a_b表示以a开头，以b结尾的长度为3的任意字符串。如acb，a王b等都满足该匹配串。 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;涉及空值的查询例&quot;&gt;涉及空值的查询例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;where **** IS NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;多重条件查询&quot;&gt;多重条件查询&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;可用逻辑运算符AND和OR来联结多个查询条件。AND的优先级高于OR，但可以用括号改变优先级
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;order-by&quot;&gt;ORDER BY&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;  用户可以用ORDER BY子句对查询结果按照一个或多个属性列的升序（ASC）或降序（DESC）排列，缺省值为升序
SELECT *** FROM **
WHERE ***
ORDER BY *** DESC(ASC)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;带having子句的分组查询&quot;&gt;带HAVING子句的分组查询&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;当完成数据结果的查询和统计后，可以使用HAVING关键字来对查询和统计的结果进行进一步的筛选。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;输出前n行&quot;&gt;输出前n行&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;可以利用TOP语句输出查询结果集的前面若干行元组。也可以利用INTO语句将查询结果集输出到一个新建的数据表中
SELECT TOP NUMBER ** FROM ***
WHERE ***
ORDER BY **
TOP后面跟数字表示前几行，后跟PERCENT　表示百分比
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查询结果集输出到新建表中&quot;&gt;查询结果集输出到新建表中&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;INTO子句用于把查询结果存放到一个新建的表中。新建的表名由&amp;lt;新表名&amp;gt;给出，新表的列由SELECT子句中指定的列构成
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;集合并运算&quot;&gt;集合并运算&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;集合并运算是将来自不同查询的结果集合组合起来，形成一个具有综合信息的查询结果集（并集），UNION操作会自动将重复的元组去除。
SELECT ** FROM **
WHERE ***
UNION
SELECT ** FROM **
WHERE ***
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;集合交运算&quot;&gt;集合交运算&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;集合交运算是将来自不同查询结果集合中共有的元组组合起来，形成一个具有综合信息的查询结果集（交集）
SELECT ** FROM **
WHERE ***
INTERSECT
SELECT ** FROM **
WHERE ***
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;集合差运算&quot;&gt;集合差运算&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;集合差运算是将属于左查询结果集但不属于右查询结果集的元组组合起来，形成一个具有综合信息的查询结果集（差集）。
SELECT ** FROM **
WHERE ***
EXCEPT
SELECT ** FROM **
WHERE ***
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;连接查询-内连接&quot;&gt;连接查询-内连接&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;SELECT &amp;lt;目标列表达式&amp;gt; [, … n]
    FROM &amp;lt;表1&amp;gt; INNER JOIN &amp;lt;表2&amp;gt;
   ON &amp;lt;连接条件表达式&amp;gt;[, … n]
注意：连接条件表达式中的各连接字段类型必须是可比的，但名称不必相同。
 USE JXGL
GO
SELECT S.*,SC.*
FROM S INNER JOIN SC
ON S.SNO=SC.SNO 
GO 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;连接查询-外连接&quot;&gt;连接查询-外连接&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;(1) 左外连接
左外连接是对连接条件左边的表不加限制。当左边表元组与右边表元组不匹配时，与右边表的相应列值取NULL。语句格式如下：
    SELECT &amp;lt;目标列表达式&amp;gt;[, … n]
    FROM &amp;lt;表1&amp;gt;LEFT[OUTER]JOIN &amp;lt;表2&amp;gt;[, … n]
    ON &amp;lt;连接条件表达式&amp;gt;

  (2) 右外连接
右外连接是对连接条件右边的表不加限制。当右边表元组与左边表元组不匹配时，与左边表的相应列值取NULL。语句格式如下：
SELECT &amp;lt;目标列表达式&amp;gt;[, … n]
FROM &amp;lt;表1&amp;gt; RIGHT [OUTER] JOIN &amp;lt;表2&amp;gt;[, … n]
ON &amp;lt;连接条件表达式&amp;gt;

(3) 全外连接
全外连接是对连接条件的两个表都不加限制。当一边表元组与另一边表元组不匹配时，与另一边表的相应列值取NULL。语句格式如下：
SELECT &amp;lt;目标列表达式&amp;gt; [, … n]
FROM &amp;lt;表1&amp;gt; FULL [OUTER] JOIN &amp;lt;表2&amp;gt;[, … n]
ON &amp;lt;连接条件表达式&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;交叉连接&quot;&gt;交叉连接&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;交叉连接（cross join）也称为笛卡尔积，它是在没有连接条件下的两个表的连接，包含了所连接的两个表中所有元组的全部组合。
该连接方式在实际应用中是很少的。语句格式如下：
  SELECT &amp;lt;目标列表达式&amp;gt; [,1 …n]
  FROM &amp;lt;表1&amp;gt; CROSS JOIN &amp;lt;表2&amp;gt;[,1 …n]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;子查询&quot;&gt;子查询&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;子查询（subquery）是指在一个SELECT查询语句中包含另一个SELECT查询语句，即一个SELECT语句嵌入到另一个SELECT语句中。其中，外层的SELECT语句称为父查询或外查询，嵌入内层的SELECT语句称为子查询或内查询。因此，子查询也称为嵌套查询（nested query）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;无关子查询&quot;&gt;无关子查询&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;无关子查询的执行不依赖于父查询。它执行的过程是：首先执行子查询语句，得到的子查询结果集传递给父查询语句使用。无关子查询中对父查询没有任何引用
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;例  查询选修了“C3”号课程的学生的姓名和所在专业。
GO
SELECT SNAME,SDEPT 
FROM S
WHERE SNO IN
     (SELECT SNO
      FROM SC
      WHERE CNO='C3')
GO 
注意：子查询的SELECT语句不能使用ORDER BY子句，ORDER BY子句只能对最终查询结果排序。

例6.41 查询其它系中比计算机科学系（CS）某一学生年龄小的学生姓名和年龄。
    GO
    SELECT SNAME,AGE
    FROM S
    WHERE AGE&amp;lt;ANY(SELECT AGE
                     FROM S
                     WHERE SDEPT='CS')
              AND Sdept&amp;lt;&amp;gt;‘CS’      --注意这是父查询块中的条件
    GO
    SQL Server执行此查询时，首先处理子查询，找出CS系中所有学生的年龄，构成一个查询结果集合，如（21，23，22）。然后处理父查询，查找所有不是CS系且年龄小于21或23或22的学生。 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;插入子查询结果&quot;&gt;插入子查询结果&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;子查询不仅可以嵌套在SELECT语句中，也可以嵌套在INSERT语句中，用以生成要插入的批量数据。
    插入子查询结果的INSERT语句的格式为：
     INSERT  INTO &amp;lt;表名&amp;gt;[(&amp;lt;列名&amp;gt;[, … n)]&amp;lt;子查询&amp;gt; 
例  对每一个系，求学生的平均年龄，并把结果存入数据库。首先在数据库中建立一个新表，其中一列存放系名，另一列存放相应的学生平均年龄。
    USE JXGL
    GO
    CREATE TABLE DEPT_AGE( SDEPT CHAR(15), AVG_AGE REAL)
    GO
    然后对S表按系分组求平均年龄，再把系名和平均年龄存入新表中。
    USE JXGL
    GO
    INSERT  INTO DEPT_AGE(SDEPT,AVG_AGE)
    SELECT SDEPT,AVG(AGE)
    FROM S
    GROUP BY SDEPT
    GO
  
     (2) 带子查询的删除语句
子查询也可以嵌套在DELETE语句中，用以构造执行删除操作的条件。
例6.45 删除计算机科学系（CS）所有学生的选课记录。
  USE JXGL
  GO
  DELETE
  FROM SC
  WHERE 'CS'=
      (SELECT SDEPT 
        FROM S
       WHERE S.SNO=SC.SNO)
  GO
                        
    (3) 带子查询的修改语句
子查询也可以嵌套在UPDATE语句中，用以构造修改的条件。
例  将计算机科学系（CS）全体学生的成绩提高5%。 
    USE JXGL
    GO
    UPDATE SC
    SET GRADE=GRADE+GRADE*0.05
    WHERE 'CS'=
       (SELECT SDEPT
        FROM S
        WHERE S.SNO=SC.SNO)
     GO   
注意：对某个基本表中数据的增、删、改操作有可能会破坏参照完整性。 

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;游标&quot;&gt;游标&lt;/h2&gt;

&lt;p&gt;声明游标
和使用其它类型变量一样，使用一个游标之前，必须先声明它。
    DECLARE CURSOR&lt;游标名&gt;
    [INSENSITIVE] [SCROLL] CURSOR
    FOR &lt;SELECT-语句&gt;
    [FOR READ ONLY|UPDATE[OF &lt;列名&gt;[, … n]]]
INSENSITIVE：定义的游标所选出来的元组存放在一个临时表中（建立在tempdb数据库中），对该游标的读取操作都有临时表来应答。
 SCROLL：指定游标使用的读取选项，默认时为NEXT，其取值如下表所示。&lt;/列名&gt;&lt;/SELECT-语句&gt;&lt;/游标名&gt;&lt;/p&gt;

&lt;p&gt;SCROLL的取值&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;SCROLL&lt;/strong&gt;选项&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;含 义&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;FIRST&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;读取游标中的第一行数据。&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;LAST&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;读取游标中的最后一行数据。&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PRIOR&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;读取游标当前位置的上一行数据。&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;NEXT&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;读取游标当前位置的下一行数据。&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;RELATIVE n&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;读取游标当前位置之前或之后的第&lt;/strong&gt;n行数据（n为正向前，为负向后）。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ABSULUTE n&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;读取游标中的第&lt;/strong&gt;n行数据。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;READ ONLY：表示定义的游标为只读游标，表明不允许使用UPDATE、DELETE语句更新游标内的数据。默认状态下游标允许更新。
UPDATE[OF&lt;列名&gt;[, … n]]：指定游标内可以更新的列，如果没有指定要更新的列，则表明所有列都允许更新&lt;/列名&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mssql&quot;&gt;例  声明一个名为S_Cursor的游标，用以读取计算机科学系（CS）的所有学生的信息。
USE JXGL
GO
DECLARE S_Cursor CURSOR 
FOR SELECT *
         FROM S
         WHERE SDEPT='CS'
    GO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开游标
声明一个游标后，还必须使用OPEN语句打开游标，才能对其进行访问。语句格式如下：
    OPEN [GLOBAL] &lt;游标名&gt;|&lt;游标变量名&gt;
参数说明如下：
GLOBAL：指定游标为全局游标。&lt;/游标变量名&gt;&lt;/游标名&gt;&lt;/p&gt;
&lt;游标名&gt;：已声明的游标名称。如果一个全局游标与一个局部游标同名，则要使用GLOBAL表明其全局游标。
 &lt;游标变量名&gt;：游标变量的名称，该名称可以引用一个游标

当执行打开游标的语句时，服务器将执行声明游标时使用的SELECT语句。如果声明游标时使用了INSENSITIVE选项，则服务器会在tempdb中建立一个临时表，存放游标将要进行操作的结果集的副本。
利用OPEN语句打开游标后，游标位于查询结果集的第一个行。同时也可以使用全局变量@@cursor_rows获得最后打开的游标中符合条件的行数。

```mssql
例  打开例6.47所声明的游标。
    GO
    OPEN S_Cursor
    GO
```

读取游标
在打开游标后，就可以利用FETCH语句从查询结果集中读取数据。使用FETCH语句一次可以读取一条记录，具体语句格式如下：
FETCH [[NEXT|PRIOR|FIRST|LAST
|ABSOLUTE n|@nvar
|RELATIVE n|@nvar]
FROM]
    [GLOBAL]&lt;游标名&gt;|&lt;游标变量名&gt;
    [INTO @变量名[, … n]]
NEXT：返回结果集中当前行的下一行，并将当前行向后移一行。 
PRIOR：读取紧临当前行的前面一行，并将当前行向前移一行。

FIRST：读取结果集中的第一行并将其设为当前行。
LAST：读取结果集中的最后一行并将其设为当前行。
ABSOLUTE n|@nvar：如果n或@nvar为正数，读取从结果集头部开始的第n行，并将返回的行变为新的当前行；如果n或@nvar为负数，读取从结果集尾部之前的第n行，并将返回的行变为新的当前行；如果n或@nvar为0，则没有行返回。
RELATIVE n | @nvar：如果n或@nvar为正数，则读取当前行之后的第n行，并将返回的行变为新的当前行；如果n或@nvar为负数，则读取当前行之前的第n行，并将返回的行变为新的当前行；如果n或@nvar为0，则读取当前行。
GLOBAL：指定游标为全局游标。
INTO @变量名[, … n]：允许读取的数据存放在多个变量中。在变量行中的每个变量必须与结果集中相应的属性列对应（顺序、数据类型等）

 @@FETCH_STATUS全局变量返回上次执行FETCH命令的状态。返回值如下：
0：表示 FETCH 语句成功。
-1：表示FETCH 语句失败或此行不在结果集中。
-2：表示被读取的行不存在。

```mssql
例 从例6.47所声明的游标中读取数据。
    GO
    FETCH NEXT FROM S_Cursor
    GO

```

关闭游标
在处理完结果集中数据之后，必须关闭游标来释放结果集。可以使用CLOSE语句来关闭游标，但此语句不释放与游标有关的一切资源。语句格式如下：
CLOSE[GLOBAL]&lt;游标名&gt;|&lt;游标变量名&gt;
其中各参数意义与打开命令一致。

```mssql
例  关闭例6.47所声明的游标。
     GO
     CLOSE S_Cursor
     GO
```

释放游标
游标使用不再需要之后，要释放游标，以获取与游标有关的一切资源。语句格式如下：
DEALLOCATE[GLOBAL]&lt;游标名&gt;|&lt;游标变量名&gt;
其中各参数意义与打开命令一致。

```mssql
例  释放例6.47所声明的游标。
     GO
     DEALLOCATE S_Cursor
     GO
```

## 创建视图

```mssql
语句格式为：
     CREATE VIEW &lt;视图名&gt;[(&lt;列名&gt;[, … n ])] 
     AS 
      &lt;SELECT查询子句&gt; 
     [WITH CHECK OPTION] 
```

```mssql
例7.2 建立数学系（MA）学生的视图V_MA，并要求进行修改和插入操作时仍需保证该视图只有数学系的学生。 
USE JXGL
GO
CREATE VIEW V_MA
AS
SELECT SNO,SNAME,AGE
FROM S
WHERE SDEPT='MA'
WITH CHECK OPTION
GO    
由于在定义V_MA视图时加上了WITH CHECK OPTION子句，以后对该视图进行插入、修改和删除操作时，RDBMS会验证条件SDEPT=’MA’。
```

## 修改视图

```mssql
T-SQL提供了ALTER VIEW语句修改视图，语句格式如下：
     ALTER VIEW &lt;视图名&gt;[(&lt;列名&gt;[, … n ])] 
     AS 
     &lt;SELECT查询子句&gt; 
     [WITH CHECK OPTION]
```

```mssql
例7.5 修改例7.2中视图V_MA，并要求该视图只查询数学系（MA）的男学生。 
    USE JXGL
    GO
    ALTER VIEW V_MA
    AS
    SELECT SNO,SNAME,AGE
    FROM S
    WHERE SDEPT='MA' AND SEX='M'
    WITH CHECK OPTION
    GO
```

## 删除视图

DROP VIEW &lt;视图名&gt;
&lt;/视图名&gt;&lt;/SELECT查询子句&gt;&lt;/列名&gt;&lt;/视图名&gt;&lt;/SELECT查询子句&gt;&lt;/列名&gt;&lt;/视图名&gt;&lt;/游标变量名&gt;&lt;/游标名&gt;&lt;/游标变量名&gt;&lt;/游标名&gt;&lt;/游标变量名&gt;&lt;/游标名&gt;&lt;/游标变量名&gt;&lt;/游标名&gt;</content><author><name></name></author><category term="sql" /><summary type="html">部分语句模板</summary></entry><entry><title type="html">删除文件原理</title><link href="http://localhost:4000/_posts/2020-05-12-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%8E%9F%E7%90%86/" rel="alternate" type="text/html" title="删除文件原理" /><published>2020-05-12T00:00:00+08:00</published><updated>2020-05-12T00:00:00+08:00</updated><id>http://localhost:4000/_posts/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%8E%9F%E7%90%86</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-12-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%8E%9F%E7%90%86/">&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux删除文件原理&quot;&gt;LINUX删除文件原理&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux是通过link的数量来控制文件删除的，只有当一个文件不存在任何link的时候，这个文件才会被删除。一般来说，每个文件都有2个link计数器:&lt;code&gt;i_count&lt;/code&gt; 和&lt;code&gt;i_link&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;i_count&lt;/code&gt;的意义是当前文件使用者（或被调用）的数量,i_link 的意义是介质连接的数量（硬链接的数量）；可以理解为&lt;code&gt;i_count&lt;/code&gt;是内存引用计数器，i_link是磁盘的引用计数器。&lt;/p&gt;

&lt;p&gt;当一个文件被某一个进程引用时，对应&lt;code&gt;i_count&lt;/code&gt;数就会增加；当创建文件的硬链接的时候，对应&lt;code&gt;i_link&lt;/code&gt;数就会增加&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**对于删除命令rm而言，实际就是减少磁盘引用计数i_link**。&lt;/code&gt;这里就会有一个问题，如果一个文件正在被某个进程调用，而用户却执行rm操作把文件删除了，那么会出现什么结果呢？当用户执行rm操作删除文件后，再执行ls或者其他文件管理命令，无法再找到这个文件了，但是调用这个删除的文件的进程却在继续正常执行，依然能够从文件中正确的读取及写入内容.&lt;/p&gt;

&lt;p&gt;这是因为rm操作只是将文件的i_link减少了，如果没其它的链接i_link就为0了；但由于该文件依然被进程引用，因此，此时文件对应的i_count并不为0，所以即使执行rm操作，但系统并没有真正删除这个文件，当只有i_link及i_count都为0的时候，这个文件才会真正被删除。也就是说，还需要解除该进程的对该文件的调用才行。&lt;/p&gt;</content><author><name></name></author><category term="linux" /><summary type="html">LINUX删除文件原理</summary></entry><entry><title type="html">JAVA一些问题二</title><link href="http://localhost:4000/_posts/2020-05-11-JAVA%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E4%B8%89/" rel="alternate" type="text/html" title="JAVA一些问题二" /><published>2020-05-11T00:00:00+08:00</published><updated>2020-05-11T00:00:00+08:00</updated><id>http://localhost:4000/_posts/JAVA%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E4%B8%89</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-11-JAVA%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E4%B8%89/">&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;并行和并发区别&quot;&gt;&lt;strong&gt;并行和并发区别&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。&lt;/li&gt;
  &lt;li&gt;并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。&lt;/li&gt;
  &lt;li&gt;在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;线程和进程的区别&quot;&gt;&lt;strong&gt;线程和进程的区别&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;守护线程&quot;&gt;&lt;strong&gt;守护线程&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;创建线程方式&quot;&gt;&lt;strong&gt;创建线程&lt;/strong&gt;方式&lt;em&gt;**&lt;/em&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;①. 继承Thread类创建线程类&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。&lt;/li&gt;
  &lt;li&gt;创建Thread子类的实例，即创建了线程对象。&lt;/li&gt;
  &lt;li&gt;调用线程对象的start()方法来启动该线程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;②. 通过Runnable接口创建线程类&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。&lt;/li&gt;
  &lt;li&gt;创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。&lt;/li&gt;
  &lt;li&gt;调用线程对象的start()方法来启动该线程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;③. 通过Callable和Future创建线程&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。&lt;/li&gt;
  &lt;li&gt;创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。&lt;/li&gt;
  &lt;li&gt;使用FutureTask对象作为Thread对象的target创建并启动新线程。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调用FutureTask对象的get()方法来获得子线程执行结束后的返回值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;runnable-和-callable-区别&quot;&gt;&lt;strong&gt;runnable 和 callable 区别&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;线程状态&quot;&gt;&lt;strong&gt;线程状态&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。&lt;/li&gt;
  &lt;li&gt;就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。&lt;/li&gt;
  &lt;li&gt;运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。&lt;/li&gt;
  &lt;li&gt;阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;sleep-和-wait-区别&quot;&gt;&lt;strong&gt;sleep() 和 wait()&lt;/strong&gt; 区别&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sleep()：方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep()  方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。&lt;/p&gt;

&lt;p&gt;wait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;notify和-notifyall区别&quot;&gt;&lt;strong&gt;notify()和 notifyAll()&lt;/strong&gt;区别&lt;em&gt;**&lt;/em&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。&lt;/p&gt;

&lt;p&gt;当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait  线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。&lt;/p&gt;

&lt;p&gt;优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized  代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;线程的-run和-start区别&quot;&gt;&lt;strong&gt;线程的 run()和 start()&lt;/strong&gt;区别&lt;em&gt;**&lt;/em&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。&lt;/p&gt;

&lt;p&gt;start()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态，  这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。&lt;/p&gt;

&lt;p&gt;run()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。 如果直接调用run(),其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用start()方法而不是run()方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;创建线程池方式&quot;&gt;&lt;strong&gt;创建线程池方式&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;①. newFixedThreadPool(int nThreads)&lt;/p&gt;

&lt;p&gt;创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。&lt;/p&gt;

&lt;p&gt;②. newCachedThreadPool()&lt;/p&gt;

&lt;p&gt;创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。&lt;/p&gt;

&lt;p&gt;③. newSingleThreadExecutor()&lt;/p&gt;

&lt;p&gt;这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。&lt;/p&gt;

&lt;p&gt;④. newScheduledThreadPool(int corePoolSize)&lt;/p&gt;

&lt;p&gt;创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;线程池状态&quot;&gt;&lt;strong&gt;线程池&lt;/strong&gt;状态&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated&lt;/p&gt;

&lt;p&gt;线程池各个状态切换框架图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/home/admin233/博客/verylazycat.github.io/img/线程池.png&quot; alt=&quot;线程池&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;线程池中-submit和-execute方法区别&quot;&gt;&lt;strong&gt;线程池中 submit()和 execute()方法&lt;/strong&gt;区别&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;接收的参数不一样&lt;/li&gt;
  &lt;li&gt;submit有返回值，而execute没有&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;submit方便Exception处理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;在-java-程序中怎么保证多线程的运行安全&quot;&gt;&lt;strong&gt;在 java 程序中怎么保证多线程的运行安全&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线程安全在三个方面体现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；&lt;/li&gt;
  &lt;li&gt;可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;多线程锁的升级原理&quot;&gt;&lt;strong&gt;多线程锁的升级原理&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/home/admin233/博客/verylazycat.github.io/img/锁升级.png&quot; alt=&quot;锁升级&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;死锁&quot;&gt;&lt;strong&gt;死锁&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;防止死锁&quot;&gt;&lt;strong&gt;防止死锁&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;死锁的四个必要条件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源&lt;/li&gt;
  &lt;li&gt;请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放&lt;/li&gt;
  &lt;li&gt;不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放&lt;/li&gt;
  &lt;li&gt;环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。&lt;/p&gt;

&lt;p&gt;此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;threadlocal&quot;&gt;&lt;strong&gt;ThreadLocal&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web  服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;synchronized-底层实现原理&quot;&gt;&lt;strong&gt;synchronized 底层实现原理&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。&lt;/p&gt;

&lt;p&gt;Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;普通同步方法，锁是当前实例对象&lt;/li&gt;
  &lt;li&gt;静态同步方法，锁是当前类的class对象&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同步方法块，锁是括号里面的对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;synchronized-和-volatile-的区别&quot;&gt;&lt;strong&gt;synchronized 和 volatile 的区别&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。&lt;/li&gt;
  &lt;li&gt;volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。&lt;/li&gt;
  &lt;li&gt;volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。&lt;/li&gt;
  &lt;li&gt;volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;synchronized-和-lock-区别&quot;&gt;&lt;strong&gt;synchronized 和 Lock 区别&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;首先synchronized是java内置关键字，在jvm层面，Lock是个java类；&lt;/li&gt;
  &lt;li&gt;synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；&lt;/li&gt;
  &lt;li&gt;synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；&lt;/li&gt;
  &lt;li&gt;用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；&lt;/li&gt;
  &lt;li&gt;synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；&lt;/li&gt;
  &lt;li&gt;Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;synchronized-和-reentrantlock-区别&quot;&gt;&lt;strong&gt;synchronized 和 ReentrantLock 区别&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁&lt;/li&gt;
  &lt;li&gt;ReentrantLock可以获取各种锁的信息&lt;/li&gt;
  &lt;li&gt;ReentrantLock可以灵活地实现多路通知&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;atomic-的原理&quot;&gt;&lt;strong&gt;atomic 的原理&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Atomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。&lt;/p&gt;

&lt;p&gt;Atomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。&lt;/p&gt;</content><author><name></name></author><category term="JAVA" /><summary type="html">并行和并发区别</summary></entry><entry><title type="html">sql-server复习二</title><link href="http://localhost:4000/_posts/2020-05-10-sql-server%E5%A4%8D%E4%B9%A0%E4%BA%8C/" rel="alternate" type="text/html" title="sql-server复习二" /><published>2020-05-10T00:00:00+08:00</published><updated>2020-05-10T00:00:00+08:00</updated><id>http://localhost:4000/_posts/sql-server%E5%A4%8D%E4%B9%A0%E4%BA%8C</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-10-sql-server%E5%A4%8D%E4%B9%A0%E4%BA%8C/">&lt;h2 id=&quot;sql-server复习二&quot;&gt;sql-server复习二&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;关系模式&quot;&gt;关系模式&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个关系都有一个模式，称为关系模式(relation schema)，由一个关系名及它的所有属性名构成。一般表示为：关系名（属性1,属性2,…,属性n）&lt;/p&gt;

&lt;p&gt;关系是一种规范化了的二维表格，具有如下性质：
属性值是原子的，不可分解。
没有重复元组。
没有行序。
理论上没有列序，但一般使用时都有列序&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;关键码和表之间的联系&quot;&gt;关键码和表之间的联系&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;超键：在一个关系中，能惟一标识元组的属性或属性集称为关系的超键&lt;/li&gt;
  &lt;li&gt;候选键：如果一个属性集能惟一标识元组，且又不含有多余的属性，那么这个属性集称为关系的候选键。&lt;/li&gt;
  &lt;li&gt;主键：若一个关系中有多个候选键，则选其中的一个为关系的主键。&lt;/li&gt;
  &lt;li&gt;外键：若一个关系R中包含有另一个关系S的主键所对应的属性组F，则称F为R的外键。并称关系S为参照关系，关系R为依赖关系。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;基本的关系操作&quot;&gt;基本的关系操作&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关系模型中常用的关系操作包括&lt;code&gt;查询（Query）&lt;/code&gt;操作和&lt;code&gt;插入（Insert）&lt;/code&gt;、&lt;code&gt;删除（Delete）&lt;/code&gt;、&lt;code&gt;修改（Update）&lt;/code&gt;操作。
查询操作又可以分为：&lt;code&gt;选择（Select）&lt;/code&gt;、&lt;code&gt;投影（Project）&lt;/code&gt;、&lt;code&gt;连接（Join）&lt;/code&gt;、&lt;code&gt;除（Divide）&lt;/code&gt;、&lt;code&gt;并（Union）&lt;/code&gt;、&lt;code&gt;差（Except）&lt;/code&gt;、&lt;code&gt;交（Intersection）&lt;/code&gt;、&lt;code&gt;笛卡尔积等&lt;/code&gt;。其中选择、投影、并、差、笛卡尔积是5种基本操作&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;实体完整性entity-integrity约束&quot;&gt;实体完整性（Entity Integrity）约束&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若属性（指一个或一组属性）A是基本关系R的主属性。则A不能取空值。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;参照完整性约束&quot;&gt;参照完整性约束&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果属性集K是关系模式R1的主键，K也是关系模式R2的外键，那么在R2的关系中，K的取值只允许两种可能，或者为空值，或者等于R1关系中某个主键值。
 这条规则的实质是“不允许引用不存在的实体”。
 在上述形式定义中，关系模式R1的关系称为“参照关系”，关系模式R2的关系称为“依赖关系”。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;用户定义的完整性规则&quot;&gt;用户定义的完整性规则&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用户定义完整性约束（user defined integrity constraint）就是针对用户的具体应用环境，给出的具体数据的约束条件。 
用户可以针对具体的数据要求特征，设置完整性约束，由系统来检验实施，以使用统一的方法处理它们，不再由应用程序承担这项工作&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;传统的集合运算&quot;&gt;传统的集合运算&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;并（Union）
      设关系R和S具有相同的关系模式，R和S的并是由属于R或属
  于S的元组构成的集合，记为R∪S。形式定义如下：
  R∪S≡{t | t∈R ∨ t∈S}，t是元组变量，R和S的元数相同。&lt;/li&gt;
  &lt;li&gt;差（Difference）
      设关系R和S具有相同的关系模式，R和S的差是由属于R但不
  属于S的元组构成的集合，记为R－S。形式定义如下：
  R－S≡{ t | t∈R ∧ t∈S}，R和S的元数相同。&lt;/li&gt;
  &lt;li&gt;交（intersection）
      关系R和S的交是由属于R又属于S的元组构成的集合，记为
R∩S，这里要求R和S定义在相同的关系模式上。形式定义如
下：
       R∩S≡{t︱t∈R ∧ t∈S}，R和S的元数相同。
由于R∩S = R-(R-S)，或R∩S = S-(S-R)，因此交操作不是一个独立的操作。&lt;/li&gt;
  &lt;li&gt;笛卡儿积(Cartesian Product)
    设关系R和S的元数分别为r和s,定义R和S的一个(r+s)元的元
组集合，每个元组的前r个分量来自R的一个元组，后s个分量来自S的一个元组，记为R×S。
       R×S ≡{t|t=&amp;lt;tr,ts&amp;gt;∧tr∈R∧ts∈S}&lt;/li&gt;
  &lt;li&gt;选择（Selection）
选择是在关系R中选择满足给定条件的所有元组构成的新关系。形式定义为：
σF(R)={t|t∈R∧F(t)=true}其中，F表示选择条件，它是一个逻辑表达式，取逻辑值“true”或“false”。在选择条件表达式F中，有时属性也用其排列序号来表示，常量值用单引号括起来。
例如，σ2＞ˊ3ˊ（R）表示从R中挑选第2个分量值大于3的元组所构成的关系。
书写时，为了与属性序号区别起见，常量用引号括起来，而属性序号或属性名不要用引号括起来。&lt;/li&gt;
  &lt;li&gt;投影
关系R上的投影是从R中选择出若干属性列组成新的关系。形式定义为：
 πA(R)={t[A] | t∈R}
其中A为R中的属性列集合，其中A也可以用属性序号表示。 
投影操作是从列角度进行的运算。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;连接（join）
连接（join）运算是从两个关系的笛卡尔积中选取属性间满足一定条件的元组。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;实例&quot;&gt;实例&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例2.11 设教学数据库中有三个关系：
      学生关系   S(S#,SNAME,AGE,SEX)
      选课关系   SC(S#,C#,GRADE)&lt;br /&gt;
      课程关系    C(C#,CNAME,TEACHER)
   用关系代数表达式表示查询语句。
  (1) 检索学习课程号为C2的学生学号与成绩。
        πS#,GRADE(σC#=‘C2’ (SC))
 (2) 检索学习课程号为C2的学生的学号与姓名。
         πS#,SNAME(σC#=‘C2’ (S ⋈ SC))
 (3) 检索选修课程名为MATHS的学生学号与姓名。
           πS#,SNAME(σCNAME=‘MATHS’ (S ⋈ SC ⋈ C))&lt;/p&gt;

&lt;p&gt;(4) 检索选修课程号为C2或C4的学生学号。
           πS#(σC#=‘C2’ ∨C#=‘C4’(SC))
  (5) 检索至少选修课程号为C2和C4的学生学号。
           π1(σ1=4∧2=‘C2’ ∧5=‘C4’ (SC×SC))&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;一般地有下列规律：
(1) 对于只涉及到选择、投影、连接的查询可用下列表达式表示：                &lt;br /&gt;
             π(σ(R×S)) 	或者π(σ(R       S))
(2) 对于否定的操作，一般要用差操作表示，例如“检索不学C2课的学生姓名”。用下列表达式表示：
          πSNAME(S)-πSNAME(σCNO=’C2’(S       SC))但不能用下式表示：    		πSNAME(σCNO≠’C2’(S       SC))  &lt;br /&gt;
⑶ 对于检索具有“全部”特征的操作，一般要用除法操作表示，例如“检索学习全部课程的学生学号”。用下列表达式表示：    &lt;br /&gt;
         要用πSNO,CNO(SC)÷πCNO(C)表示&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;规范化原则&quot;&gt;规范化原则&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关系模式有操作异常或冗余问题，就分解它&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;函数依赖的定义&quot;&gt;函数依赖的定义&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设有关系模式R(U)，X和Y是属性集U的子集，若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称X函数确定Y或Y函数依赖（Functional Depend-
ency，简记为FD）于X，记作X→Y&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;完全函数依赖和部分函数依赖&quot;&gt;完全函数依赖和部分函数依赖&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;假设在关系模式R(U)中，X和Y是属性集U的子集，且有X→Y，如果对于X的任一个真子集W，都有W→Y不成立，则称Y完全函数依赖于X，否则，称Y部分函数依赖于X。
 完全函数依赖说明了在依赖关系的决定项中没有多余的属性。
如函数依赖(SNO,CNO)→GRADE，TNAME→TAGE是完全函数依赖。 (SNO,CNO)→SNAME，(SNO,CNO)→CNAME，(SNO,CNO)→TNAME，(SNO,CNO)→TAGE都是部分函数依赖。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;fd和关键码的联系&quot;&gt;FD和关键码的联系&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;利用完全函数依赖和部分函数依赖可以说明函数依赖和键的关系：假设关系
模式R的属性集是U，X是U的一个子集。如果U部分函数依赖于X，则X是R的一个
超键。如果U完全函数依赖于X，则X是R的一个候选键。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;传递函数依赖&quot;&gt;传递函数依赖&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;假设在关系模式R(U)中，X 、Y和Z是属性集U的不同子集，如果X→Y（并且Y→X不成立），Y→Z，则称Z传递函数依赖X，或称X传递函数确定Z。
如函数依赖CNO→TNAME和TNAME→TAGE，所以R的函数依赖CNO→TAGE是传递函数依赖。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;armstrong推理&quot;&gt;Armstrong推理&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从已知的一些函数依赖，可以推导出另外一些函数依赖，这就需要一系列的推理规则。称为Armstrong公理。&lt;/p&gt;

&lt;p&gt;设U是关系模式R的属性集，F是R上成立的只涉及到U中属性的函数依赖集。FD的推理规则有以下三条：
 A1（自反性，Reflexivity）：若YXU，则X→Y在R上成立。
 A2（增广性，Augmentation）：若X→Y在R上成立，且ZU，则XZ→YZ在R上成立。
 A3（传递性，Transitivity）：若X→Y和Y→Z在R上成立，则X→Z在R上成立。&lt;/p&gt;

&lt;p&gt;FD的其他五条推理规则:
(1) A4（合并性，Union）：｛ X→Y，X→Z ｝⊨X→YZ。
(2) A5（分解性，Decomposition）：  ｛ X→Y，ZY ｝ ⊨ X→Z 。
(3) A6（伪传递性）：｛ X→Y，WY→Z ｝⊨ WX→Z。
(4) A7（复合性，Composition）：  ｛ X→Y，W→Z ｝ ⊨ XW→YZ。&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;例2.14  设关系R(ABCDE)上函数依赖集为F，并且F={A→BC，CD→E，B→D，E→A}。求出R的候选键。
解：已知A→BC，由分解性得A→B，A→C；又已知B→D，由传递性得 A→D；又由合并性得 A→CD，又已知CD→E，再由传递性得 A→E，因此，A是R的一个候选键。
同理可得R的另外三个候选键E、CD和BC。 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;关系的范式及规范化&quot;&gt;关系的范式及规范化&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关系模式的好与坏，用什么标准衡量？这个标准就是模式的范式
（Normal Forms，简记为NF）。范式的种类与数据依赖有着直接的联系，基于FD的范式有1NF、2NF、3NF、BCNF等多种。
在不提及FD时，关系中是不可能有冗余的问题，但是当存在FD时，关系中就有可能存在数据冗余问题。
1NF是关系模式的基础；2NF已成为历史，一般不再提及；在数据库设计中最常用的是3NF和BCNF。&lt;/p&gt;

&lt;p&gt;对于各种范式之间的联系有：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;BCNF | 3NF | 2NF | 1NF
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;范式&quot;&gt;范式&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第一范式&lt;/p&gt;

    &lt;p&gt;定义 如果关系模式R的每个关系r的属性值都是不可分的原子值，那么称R是第一范式（first normal form，简记为1NF）的模式。
 满足1NF的关系称为规范化的关系，否则称为非规范化的关系。关系数据库研究的关系都是规范化的关系。例如关系模式R（NAME，
 ADDRESS，PHONE），如果一个人有两个电话号码（PHONE），那么在关系中至少要出现两个元组，以便存储这两个号码。
 1NF是关系模式应具备的最起码的条件。&lt;/p&gt;

    &lt;p&gt;非规范模式变为1NF：
   (1)  把不含单纯值的属性分解为多个原子值。
   (2)  把关系模式分解。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;第二范式
定义 如果关系模式R是1NF，且每个非主属性完全函数依赖于候选键，那么称R是第二范式（2NF）的模式。如果数据库模式中每个关系模式都是2NF，则称数据库模式为2NF的数据库模式。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;例2.15 设关系模式R(SNO,CNO,GRADE,TNAME,TADDR) 。  
（SNO,CNO）是R的候选键。R上有两个函数依赖：
  (SNO,CNO)→(TNAME,TADDR)
   CNO→(TNAME,TADDR)
 前一个函数依赖是局部依赖，R不属于2NF模式。此时R的关系就会出现数据冗余和操作异常现象。
如果把R分解成R1(CNO,TNAME,TADDR)和R2(SNO,CNO,GRADE)后，局部依赖(SNO,CNO)→(TNAME,TADDR)就消失了。R1和R2都属于2NF模式。  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;第三范式
定义  如果关系模式R是1NF，且每个非主属性都不传递依赖于R的候选键，那么称R是第三范式（3NF）的模式。如果数据库模式中每个关系模式都是3NF，则称其为3NF的数据库模式 。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;例  在例2.15中，R2是2NF模式，而且也已是3NF模式。
R1(CNO,TNAME,TADDR)是2NF模式，却不是3NF模式。这是因为R1中存在函数依赖CNO→TNAME和TNAME→TADDR，则CNO→TADDR是一个传递依赖。
如果把R2分解成R21(TNAME,TADDR)和R22(CNO,TNAME)后，CNO→TADDR就不会出现在R21和R22中。这样R21和R22都是3NF模式。 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;BC范式
定义 如果关系模式R是1NF，且每个属性都不传递依赖于R的候选键，那么称R是BCNF的模式。如果数据库模式中每个关系模式都是BCNF，则称为BCNF的数据库模式。
如果R是BCNF模式，那么R也是3NF模式。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;例2.16 设关系模式C(CNO,CNAME,PCNO)的属性分别表示课程号、课程名和先修课程号。
CNO是主键，这里没有任何非主属性对CNO部分依赖或传递依赖，所以C属于3NF。
同时C中CNO是唯一的决定因素，所以C∈BCNF。 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;例2.17 关系模式STJ(S，T，J)中，S表示学生，T表示教师，J表示课程。每一教师只教一门课。每门课有若干教师，某一学生选定某门课，就对应一个固定的教师。由语义可得到如下的函数依赖。
(S，J)→T；(S，T)→J；T→J。
这里(S，J)、(S，T)都是候诜键。
STJ是3NF，因为没有任何非主属性对键函数传递依赖或部分函数依赖。但STJ不是BCNF模式，是因为T是决定因素，而T不包含键。
3NF和BC范式是在函数依赖的条件下对模式分解所能达到的分离程度的测度。一个数据库中的关系模式如果都是BC范式，那么在函数依赖范畴内，它已经实现彻底的分离，已消除了插入和删除异常。
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;无损分解&quot;&gt;无损分解&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;定义 当对关系模式R进行分解时，R的元组将分别在相应属性集进行投影而产生新的关系。如果对新的关系进行自然连接得到的元组集合与原关系完全一致，则称该分解为无损分解（lossless decompose）。否则称为有损分解。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;heath定理&quot;&gt;Heath定理&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;假设关系模式R分解为两个子关系模式R1和R2，如果R1∩R2至少包含其中一个子关系模式的主键，则此分解是无损分解。
      在例2.18中，R(SNO,CNAME,TNAME,GRADE)分解成两个子关系模式R1(SNO,CNAME,GRADE)和R2(CNAME,TNAME)，由于R1∩R2={CNAME}，而CNAME是关系模式R2的主键，由Heath定理，该分解为无损分解。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;例：设有关系模式R（{SNO，Sname,CNO,Grade},                                 
        的一个分解为：
      R1(SNO,Sname),R2(SNO,CNO,Grade)
     因为R1∩R2=SNO, 由于SNO是R1的主键，则分解具有无损性连接。
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;保持函数依赖分解&quot;&gt;保持函数依赖分解&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;模式分解的过程还必须保证数据的语义完整性。在做任何数据输入和修改时，只要每个关系模式本身的函数依赖被满足，就可以确保整个数据库中数据的语义完整性不受破坏。
定义：设ρ={R1(U1),R2(U2),…,Rn(Un)}是关系模式R(U)的一个分解，R的函数依赖集F在Ui上的投影为Fi，如果满足              ，则称ρ具有函数依赖保持性，也称该分解为保持依赖分解（preserve depend-ency decompose）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;3nf分解&quot;&gt;3NF分解&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前在信息系统的设计中，广泛被采用的是“基于3NF的系统设计”方法 。
将R分解成多个3NF关系模式的步骤如下：
(1) 如果R不属于1NF，对其进行分解，使其满足1NF。
分解为1NF的方法可以直接将其多值属性进行分解，用分解后的多个单值属性集取代原来的属性。如关系模式R(NAME,ADDRESS,PHONE)中，假设每条记录至多有3个电话号码。此时可将多值属性分解为R1(NAME,ADDRESS,PHONE1,PHONE2,PHONE3)。有时，当多值属性取值较多时，为了防止出现大量的空值，一般将多值属性单独定义为一个实体。&lt;/p&gt;

&lt;p&gt;(2) 如果R属于1NF但R不属于2NF，分解R使其满足2NF。
将关系模式分解为符合2NF条件的方法如下：
设关系模式R(U)，主键是W，R上还存在函数依赖X→Z，并且Z是非主属性和XW，那么W→Z就是一个局部依赖。此时应把R分解成两个模式R1(XZ)，主键是X和R2(Y)，其中Y=U-Z，主键仍是W，外键是X。&lt;/p&gt;

&lt;p&gt;(3) 如果R属于2NF但R不属于3NF，分解R使其满足3NF。
将关系模式分解为符合3NF条件的方法如下：设关系模式R(U)，主键是W，R上还存在函数依赖X→Z。Z不含于X并且是非主属性，X不是候选键，那么W→Z就是一个传递函数依赖。
此时应把R分解成两个模式R1(XZ)，主键是X和R2(Y)，其中Y=U-Z，主键仍是W，外键是X。如在例2.15的关系模式R1(CNO,TNAME,TADDR)，取W={CNO}，X={TNAME}，Z={TADDR}，利用该方法就可以得到符合3NF的关系模式R11(TNAME,TADDR)和R12(CNO,TNAME)。&lt;/p&gt;</content><author><name></name></author><category term="sql" /><summary type="html">sql-server复习二</summary></entry><entry><title type="html">linux笔记</title><link href="http://localhost:4000/_posts/2020-05-09-linux%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="linux笔记" /><published>2020-05-09T00:00:00+08:00</published><updated>2020-05-09T00:00:00+08:00</updated><id>http://localhost:4000/_posts/linux%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-09-linux%E7%AC%94%E8%AE%B0/">&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;unix和linux区别&quot;&gt;Unix和Linux区别&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;开源性
Linux是一款开源操作系统，不需要付费，即可使用；Unix是一款对源码实行知识产权保护的传统商业软件，使用需要付费授权使用。&lt;/li&gt;
  &lt;li&gt;跨平台性
Linux操作系统具有良好的跨平台性能，可运行在多种硬件平台上；Unix操作系统跨平台性能较弱，大多需与硬件配套使用。&lt;/li&gt;
  &lt;li&gt;可视化界面
Linux除了进行命令行操作，还有窗体管理系统；Unix只是命令行下的系统。&lt;/li&gt;
  &lt;li&gt;硬件环境
Linux操作系统对硬件的要求较低，安装方法更易掌握；Unix对硬件要求比较苛刻，按照难度较大。&lt;/li&gt;
  &lt;li&gt;用户群体
Linux的用户群体很广泛，个人和企业均可使用；Unix的用户群体比较窄，多是安全性要求高的大型企业使用，如银行、电信部门等，或者Unix硬件厂商使用，如Sun等。相比于Unix操作系统，Linux操作系统更受广大计算机爱好者的喜爱，主要原因是Linux操作系统具有Unix操作系统的全部功能，并且能够在普通PC计算机上实现全部的Unix特性，开源免费的特性，更容易普及使用&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux-内核&quot;&gt;Linux 内核&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux 系统的核心是内核。内核控制着计算机系统上的所有硬件和软件，在必要时分配硬件，并根据需要执行软件。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;系统内存管理&lt;/li&gt;
  &lt;li&gt;应用程序管理&lt;/li&gt;
  &lt;li&gt;硬件设备管理&lt;/li&gt;
  &lt;li&gt;文件系统管理&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux的基本组件&quot;&gt;Linux的基本组件&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux内核、Shell、GUI,文件系统、应用程序&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux-的体系结构&quot;&gt;Linux 的体系结构&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/linux.png&quot; alt=&quot;linux&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户空间(User Space) ：用户空间又包括用户的应用程序(User Applications)、C 库(C Library) 。
内核空间(Kernel Space) ：内核空间又包括系统调用接口(System Call Interface)、内核(Kernel)、平台架构相关的代码(Architecture-Dependent Kernel Code)&lt;/p&gt;

&lt;p&gt;Linux 体系结构要分为用户空间和内核空间的原因&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、现代 CPU 实现了不同的工作模式，不同模式下 CPU 可以执行的指令和访问的寄存器不同。&lt;/li&gt;
  &lt;li&gt;2、Linux 从 CPU 的角度出发，为了保护内核的安全，把系统分成了两部分。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用户空间和内核空间是程序执行的&lt;strong&gt;两种不同的状态&lt;/strong&gt;，我们可以通过两种方式完成用户空间到内核空间的转移：1）系统调用；2）硬件中断&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;bash和dos之间的基本区别&quot;&gt;BASH和DOS之间的基本区别&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BASH和DOS控制台之间的主要区别在于3个方面：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;BASH命令区分大小写，而DOS命令则不区分;&lt;/li&gt;
  &lt;li&gt;在BASH下，/ character是目录分隔符，\作为转义字符。在DOS下，/用作命令参数分隔符，\是目录分隔符&lt;/li&gt;
  &lt;li&gt;DOS遵循命名文件中的约定，即8个字符的文件名后跟一个点，扩展名为3个字符。BASH没有遵循这样的惯例&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux-开机启动过程&quot;&gt;Linux 开机启动过程&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1、主机加电自检，加载 BIOS 硬件信息。&lt;/p&gt;

&lt;p&gt;BIOS(Basic Input/Output System)，基本输入输出系统，该系统存储于主板的ROM芯片上，计算机在开机时，会最先读取该系统，然后会有一个加电自检过程，这个过程其实就是检查CPU和内存，计算机最基本的组成单元(控制器、运算器和存储器)，还会检查其他硬件，若没有异常就开始加载BIOS程序到内存当中。详细的BIOS功能，这边就不说了，BIOS主要的一个功能就是存储了磁盘的启动顺序，BIOS会按照启动顺序去查找第一个磁盘头的MBR信息，并加载和执行MBR中的Bootloader程序，若第一个磁盘不存在MBR，则会继续查找第二个磁盘(PS：启动顺序可以在BIOS的界面中进行设置)，一旦BootLoader程序被检测并加载内存中，BIOS就将控制权交接给了BootLoader程序。&lt;/p&gt;

&lt;p&gt;2、读取 MBR 的引导文件(GRUB、LILO)。&lt;/p&gt;

&lt;p&gt;MBR(Master Boot Record)，主引导记录，MBR存储于磁盘的头部，大小为512bytes，其中，446bytes用于存储BootLoader程序，64bytes用于存储分区表信息，最后2bytes用于MBR的有效性检查。&lt;/p&gt;

&lt;h4 id=&quot;mbr结构&quot;&gt;&lt;code&gt;MBR&lt;/code&gt;结构&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;主引导程序代码，占446字节&lt;/li&gt;
  &lt;li&gt;磁盘签名&lt;/li&gt;
  &lt;li&gt;硬盘分区表&lt;code&gt;DPT&lt;/code&gt;，占64字节&lt;/li&gt;
  &lt;li&gt;主引导扇区结束标志&lt;code&gt;55AAH&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;查看&lt;code&gt;MBR&lt;/code&gt;记录&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo dd if=/dev/sda of=mbr.bin bs=1 count=512
hexdump -C mbr.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/MBR.png&quot; alt=&quot;MBR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GRUB(Grand Unified Bootloader)，多系统启动程序，其执行过程可分为三个步骤：&lt;/p&gt;

&lt;p&gt;　　　　Stage1：这个其实就是MBR，它的主要工作就是查找并加载第二段Bootloader程序(stage2)，但系统在没启动时，MBR根本找不到文件系统，也就找不到stage2所存放的位置，因此，就有了stage1_5&lt;/p&gt;

&lt;p&gt;　　　　Stage1_5：该步骤就是为了识别文件系统&lt;/p&gt;

&lt;p&gt;　　　　Stage2：GRUB程序会根据/boot/grub/grub.conf文件查找Kernel的信息，然后开始加载Kernel程序，当Kernel程序被检测并在加载到内存中，GRUB就将控制权交接给了Kernel程序。&lt;/p&gt;

&lt;p&gt;　　　　PS：实际上这个步骤/boot还没被挂载，GRUB直接识别grub所在磁盘的文件系统，所以实际上应该是/grub/grub.conf文件，该配置文件的信息如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;grub.conf：　

#boot=/dev/sda

default=0        #设定默认启动的title的编号，从0开始

timeout=5       #等待用户选择的超时时间

splashimage=(hd0,0)/boot/grub/splash.xpm.gz    #GRUB的背景图片

hiddenmenu     #隐藏菜单

title CentOS (2.6.18-194.el5PAE)      #内核标题

root (hd0,0)         #内核文件所在的设备

kernel /vmlinuz-2.6.18-194.el5PAE ro root=LABEL=/     #内核文件路径以及传递给内核的参数

initrd /initrd-2.6.18-194.el5PAE.img                            #ramdisk文件路径
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3、引导 Linux 内核。&lt;/p&gt;

&lt;p&gt;Kernel，内核，Kernel是Linux系统最主要的程序，实际上，Kernel的文件很小，只保留了最基本的模块，并以压缩的文件形式存储在硬盘中，当GRUB将Kernel读进内存，内存开始解压缩内核文件。讲内核启动，应该先讲下initrd这个文件，&lt;/p&gt;

&lt;p&gt;　　initrd(Initial RAM  Disk)，它在stage2这个步骤就被拷贝到了内存中，这个文件是在安装系统时产生的，是一个临时的根文件系统(rootfs)。因为Kernel为了精简，只保留了最基本的模块，因此，Kernel上并没有各种硬件的驱动程序，也就无法识rootfs所在的设备，故产生了initrd这个文件，该文件装载了必要的驱动模块，当Kernel启动时，可以从initrd文件中装载驱动模块，直到挂载真正的rootfs，然后将initrd从内存中移除。&lt;/p&gt;

&lt;p&gt;　　Kernel会以只读方式挂载根文件系统，当根文件系统被挂载后，开始装载第一个进程(用户空间的进程)，执行/sbin/init，之后就将控制权交接给了init程序&lt;/p&gt;

&lt;p&gt;4、运行第一个进程 init (进程号永远为 1 )。&lt;/p&gt;

&lt;p&gt;init，初始化，顾名思义，该程序就是进行OS初始化操作，实际上是根据/etc/inittab(定义了系统默认运行级别)设定的动作进行脚本的执行，第一个被执行的脚本为/etc/rc.d/rc.sysinit，这个是真正的OS初始化脚本，简单讲下这个脚本的任务(可以去看看实际脚本，看看都做了什么)：&lt;/p&gt;

&lt;p&gt;　　1、激活udev和selinux；2、根据/etc/sysctl.conf文件，来设定内核参数；3、设定系统时钟；4、装载硬盘映射；5、启用交换分区；6、设置主机名；7、根文件系统检测，并以读写方式重新挂载根文件系统；8、激活RAID和LVM设备；9、启用磁盘配额；10、根据/etc/fstab，检查并挂载其他文件系统；11、清理过期的锁和PID文件&lt;/p&gt;

&lt;p&gt;　　执行完后，根据配置的启动级别，执行对应目录底下的脚本，最后执行/etc/rc.d/rc.local这个脚本，至此，系统启动完成&lt;/p&gt;

&lt;p&gt;5、进入相应的运行级别。&lt;/p&gt;

&lt;p&gt;runlevel，运行级别，不同的级别会启动的服务不一样，init会根据定义的级别去执行相应目录下的脚本，Linux的启动级别分为以下几种&lt;/p&gt;

&lt;p&gt;　　0：关机模式&lt;/p&gt;

&lt;p&gt;　　1：单一用户模式(直接以管理员身份进入)&lt;/p&gt;

&lt;p&gt;　　2：多用户模式（无网络）&lt;/p&gt;

&lt;p&gt;　　3：多用户模式（命令行）&lt;/p&gt;

&lt;p&gt;　　4：保留&lt;/p&gt;

&lt;p&gt;　　5：多用户模式（图形界面）&lt;/p&gt;

&lt;p&gt;　　6：重启&lt;/p&gt;

&lt;p&gt;在不同的运行级别下，/etc/rc.d/rc这个脚本会分别执行不同目录下的脚本&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run level 0 – /etc/rc.d/rc0.d/&lt;/li&gt;
  &lt;li&gt;Run level 1 – /etc/rc.d/rc1.d/&lt;/li&gt;
  &lt;li&gt;Run level 2 – /etc/rc.d/rc2.d/&lt;/li&gt;
  &lt;li&gt;Run level 3 – /etc/rc.d/rc3.d/&lt;/li&gt;
  &lt;li&gt;Run level 4 – /etc/rc.d/rc4.d/&lt;/li&gt;
  &lt;li&gt;Run level 5 – /etc/rc.d/rc5.d/&lt;/li&gt;
  &lt;li&gt;Run level 6 – /etc/rc.d/rc6.d/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　这些目录下的脚本只有K&lt;em&gt;和S&lt;/em&gt;开头的文件，K开头的文件为开机需要执行关闭的服务，S开头的文件为开机需要执行开启的服务&lt;/p&gt;

&lt;p&gt;6、运行终端，输入用户名和密码&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux系统缺省的运行级别&quot;&gt;Linux系统缺省的运行级别&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;关机。&lt;/li&gt;
  &lt;li&gt;单机用户模式。&lt;/li&gt;
  &lt;li&gt;字符界面的多用户模式(不支持网络)。&lt;/li&gt;
  &lt;li&gt;字符界面的多用户模式。&lt;/li&gt;
  &lt;li&gt;未分配使用。&lt;/li&gt;
  &lt;li&gt;图形界面的多用户模式。&lt;/li&gt;
  &lt;li&gt;重启&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux-使用的进程间通信方式&quot;&gt;Linux 使用的进程间通信方式&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1、管道(pipe)、流管道(s_pipe)、有名管道(FIFO)。&lt;/p&gt;

&lt;p&gt;2、信号(signal) 。&lt;/p&gt;

&lt;p&gt;3、消息队列。&lt;/p&gt;

&lt;p&gt;4、共享内存。&lt;/p&gt;

&lt;p&gt;5、信号量。&lt;/p&gt;

&lt;p&gt;6、套接字(socket)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux-有哪些系统日志文件&quot;&gt;Linux 有哪些系统日志文件&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;重要的是 &lt;code&gt;/var/log/messages&lt;/code&gt; 日志文件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux系统桌面环境&quot;&gt;Linux系统桌面环境&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;KDE或Gnome&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;交换空间&quot;&gt;交换空间&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;交换空间是Linux使用的一定空间，用于临时保存一些并发运行的程序。当RAM没有足够的内存来容纳正在执行的所有程序时，就会发生这种情况。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;root帐户&quot;&gt;root帐户&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;root帐户就像一个系统管理员帐户，允许你完全控制系统。你可以在此处创建和维护用户帐户，为每个帐户分配不同的权限。每次安装Linux时都是默认帐户&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;lilo&quot;&gt;LILO&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LILO是Linux的引导加载程序。它主要用于将Linux操作系统加载到主内存中，以便它可以开始运行&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;bash&quot;&gt;BASH&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BASH是Bourne Again SHell的缩写。它由Steve Bourne编写，作为原始Bourne Shell（由/ bin / sh表示）的替代品。它结合了原始版本的Bourne Shell的所有功能，以及其他功能，使其更容易使用。从那以后，它已被改编为运行Linux的大多数系统的默认shell；推荐&lt;code&gt;zsh&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;cli&quot;&gt;CLI&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;命令行界面（英语&lt;strong&gt;：command-line interface&lt;/strong&gt;，缩写]：CLI）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）。&lt;/p&gt;

&lt;p&gt;通常认为，命令行界面（CLI）没有图形用户界面（GUI）那么方便用户操作。因为，命令行界面的软件通常需要用户记忆操作的命令，但是，由于其本身的特点，命令行界面要较图形用户界面节约计算机系统的资源。在熟记命令的前提下，使用命令行界面往往要较使用图形用户界面的操作速度要快。所以，图形用户界面的操作系统中，都保留着可选的命令行界面。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;gui&quot;&gt;GUI&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;图形用户界面（Graphical User Interface，简称 GUI，又称图形用户接口）是指采用图形方式显示的计算机操作用户界面。&lt;/p&gt;

&lt;p&gt;图形用户界面是一种人与计算机通信的界面显示格式，允许用户使用鼠标等输入设备操纵屏幕上的图标或菜单选项，以选择命令、调用文件、启动程序或执行其它一些日常任务。与通过键盘输入文本或字符命令来完成例行任务的字符界面相比，图形用户界面有许多优点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;开源优势&quot;&gt;开源优势&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开源允许你将软件（包括源代码）免费分发给任何感兴趣的人。然后，人们可以添加功能，甚至可以调试和更正源代码中的错误。它们甚至可以让它运行得更好，然后再次自由地重新分配这些增强的源代码。这最终使社区中的每个人受益&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux-文件系统&quot;&gt;Linux 文件系统&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;在 Linux 操作系统中，所有被操作系统管理的资源，例如网络接口卡、磁盘驱动器、打印机、输入输出设备、普通文件或是目录都被看作是一个文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也就是说在 Linux 系统中有一个重要的概念&lt;strong&gt;：一切都是文件&lt;/strong&gt;。其实这是 Unix 哲学的一个体现，而 Linux 是重写 Unix 而来，所以这个概念也就传承了下来。在 Unix 系统中，把一切资源都看作是文件，包括硬件设备。UNIX系统把每个硬件都看成是一个文件，通常称为设备文件，这样用户就可以用读写文件的方式实现对硬件的访问。&lt;/p&gt;

&lt;p&gt;Linux 支持 5 种文件类型，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/LINUX_FILE.png&quot; alt=&quot;LINUX_FILE&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux-的目录结构&quot;&gt;Linux 的目录结构&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/LINUX_THREE.png&quot; alt=&quot;LINUX_THREE&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;/bin： 存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里；&lt;/li&gt;
  &lt;li&gt;/etc： 存放系统管理和配置文件；&lt;/li&gt;
  &lt;li&gt;/home： 存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示；&lt;/li&gt;
  &lt;li&gt;/usr &lt;strong&gt;： 用于存放系统应用程序；&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;**/opt： 额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里；&lt;/li&gt;
  &lt;li&gt;/proc： 虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息；&lt;/li&gt;
  &lt;li&gt;/root： 超级用户（系统管理员）的主目录（特权阶级o）；&lt;/li&gt;
  &lt;li&gt;/sbin: 存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等；&lt;/li&gt;
  &lt;li&gt;/dev： 用于存放设备文件；&lt;/li&gt;
  &lt;li&gt;/mnt： 系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统；&lt;/li&gt;
  &lt;li&gt;/boot： 存放用于系统引导时使用的各种文件；&lt;/li&gt;
  &lt;li&gt;**/lib **： 存放着和系统运行相关的库文件 ；&lt;/li&gt;
  &lt;li&gt;/tmp： 用于存放各种临时文件，是公用的临时文件存储点；&lt;/li&gt;
  &lt;li&gt;/var： 用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等；&lt;/li&gt;
  &lt;li&gt;/lost+found： 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;inode&quot;&gt;inode&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文件储存在硬盘上，硬盘的最小存储单位叫做”扇区”（Sector）。每个扇区储存512字节（相当于0.5KB）。&lt;/p&gt;

&lt;p&gt;操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个”块”（block）。这种由多个扇区组成的”块”，是文件存取的最小单位。”块”的大小，最常见的是4KB，即连续八个 sector组成一个 block。&lt;/p&gt;

&lt;p&gt;文件数据都储存在”块”中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。&lt;/p&gt;

&lt;p&gt;每一个文件都有对应的inode，里面包含了与该文件有关的一些信息&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;linux-文件系统通过-i-节点把文件的逻辑结构和物理结构转换的工作过程&quot;&gt;&lt;strong&gt;Linux 文件系统通过 i 节点把文件的逻辑结构和物理结构转换的工作过程&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;inode 节点是一个 64 字节长的表，表中包含了文件的相关信息，其中有文件的大小、文件所有者、文件的存取许可方式以及文件的类型等重要信息。在 inode 节点表中最重要的内容是磁盘地址表。在磁盘地址表中有 13 个块号，文件将以块号在磁盘地址表中出现的顺序依次读取相应的块。
Linux 文件系统通过把 inode 节点和文件名进行连接，当需要读取该文件时，文件系统在当前目录表中查找该文件名对应的项，由此得到该文件相对应的 inode 节点号，通过该 inode 节点的磁盘地址表把分散存放的文件物理块连接成文件的逻辑结构&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;硬链接和软链接&quot;&gt;硬链接和软链接&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1）硬链接&lt;/p&gt;

&lt;p&gt;由于 Linux 下的文件是通过索引节点(inode)来识别文件，硬链接可以认为是一个指针，指向文件索引节点的指针，系统并不为它重新分配 inode 。每添加一个一个硬链接，文件的链接数就加 1 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;不足：1）不可以在不同文件系统的文件间建立链接；2）只有超级用户才可以为目录创建硬链接。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2）软链接&lt;/p&gt;

&lt;p&gt;软链接克服了硬链接的不足，没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。因而现在更为广泛使用，它具有更大的灵活性，甚至可以跨越不同机器、不同网络对文件进行链接。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;不足：因为链接文件包含有原文件的路径信息，所以当原文件从一个目录下移到其他目录中，再访问链接文件，系统就找不到了，而硬链接就没有这个缺陷，你想怎么移就怎么移；还有它要系统分配额外的空间用于建立新的索引节点和保存原文件的路径。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际场景下，基本是使用软链接。总结区别如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;raid&quot;&gt;RAID&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RAID 全称为独立磁盘冗余阵列(Redundant Array of Independent Disks)，基本思想就是把多个相对便宜的硬盘组合起来，成为一个硬盘阵列组，使性能达到甚至超过一个价格昂贵、 容量巨大的硬盘。RAID 通常被用在服务器电脑上，使用完全相同的硬盘组成一个逻辑扇区，因此操作系统只会把它当做一个硬盘。&lt;/p&gt;

&lt;p&gt;RAID 分为不同的等级，各个不同的等级均在数据可靠性及读写性能上做了不同的权衡。在实际应用中，可以依据自己的实际需求选择不同的 RAID 方案&lt;/p&gt;

&lt;p&gt;Linux 性能调优都有哪几种方法？&lt;/p&gt;

&lt;p&gt;1、Disabling daemons (关闭 daemons)。
2、Shutting down the GUI (关闭 GUI)。
3、Changing kernel parameters (改变内核参数)。
4、Kernel parameters (内核参数)。
5、Tuning the processor subsystem (处理器子系统调优)。
6、Tuning the memory subsystem (内存子系统调优)。
7、Tuning the file system (文件系统子系统调优)。
8、Tuning the network subsystem（网络子系统调优)&lt;/p&gt;</content><author><name></name></author><category term="linux" /><summary type="html">Unix和Linux区别</summary></entry><entry><title type="html">BIO&amp;amp;NIO&amp;amp;AIO</title><link href="http://localhost:4000/_posts/2020-05-08-BIO&NIO&AIO/" rel="alternate" type="text/html" title="BIO&amp;NIO&amp;AIO" /><published>2020-05-08T00:00:00+08:00</published><updated>2020-05-08T00:00:00+08:00</updated><id>http://localhost:4000/_posts/BIO&amp;NIO&amp;AIO</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-08-BIO&amp;NIO&amp;AIO/">&lt;p&gt;Java 中的 BIO、NIO和 AIO 理解为是 Java 语言对操作系统的各种 IO 模型的封装。程序员在使用这些 API 的时候，不需要关心操作系统层面的知识，也不需要根据不同操作系统编写不同的代码。只需要使用Java的API就可以了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;同步与异步&quot;&gt;&lt;strong&gt;同步与异步&lt;/strong&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;同步：&lt;/strong&gt; 同步就是发起一个调用后，被调用者未处理完请求之前，调用不返回。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;异步：&lt;/strong&gt; 异步就是发起一个调用后，立刻得到被调用者的回应表示已接收到请求，但是被调用者并没有返回结果，此时我们可以处理其他的请求，被调用者通常依靠事件，回调等机制来通知调用者其返回结果&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;同步和异步的区别最大在于异步的调用者不需要等待处理结果，被调用者会通过回调等机制来通知调用者其返回结果&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;阻塞和非阻塞&quot;&gt;&lt;strong&gt;阻塞和非阻塞&lt;/strong&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;阻塞：&lt;/strong&gt; 阻塞就是发起一个请求，调用者一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当条件就绪才能继续。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;非阻塞：&lt;/strong&gt; 非阻塞就是发起一个请求，调用者不用一直等着结果返回，可以先去干其他事情&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;bio-blocking-io&quot;&gt;BIO (Blocking I/O)&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成&lt;/p&gt;

&lt;h4 id=&quot;传统-bio&quot;&gt;传统 BIO&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/BIO.png&quot; alt=&quot;BIO&quot; /&gt;&lt;/p&gt;

&lt;p&gt;采用 &lt;strong&gt;BIO 通信模型&lt;/strong&gt; 的服务端，通常由一个独立的 Acceptor 线程负责监听客户端的连接。我们一般通过在 &lt;code&gt;while(true)&lt;/code&gt; 循环中服务端会调用 &lt;code&gt;accept()&lt;/code&gt; 方法等待接收客户端的连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待同当前连接的客户端的操作执行完成， 不过可以通过多线程来支持多个客户端的连接，如上图所示。&lt;/p&gt;

&lt;p&gt;如果要让 &lt;strong&gt;BIO 通信模型&lt;/strong&gt; 能够同时处理多个客户端请求，就必须使用多线程（主要原因是 &lt;code&gt;socket.accept()&lt;/code&gt;、 &lt;code&gt;socket.read()&lt;/code&gt;、 &lt;code&gt;socket.write()&lt;/code&gt; 涉及的三个主要函数都是同步阻塞的），也就是说它在接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理，处理完成之后，通过输出流返回应答给客户端，线程销毁。这就是典型的 &lt;strong&gt;一请求一应答通信模型&lt;/strong&gt; 。我们可以设想一下如果这个连接不做任何事情的话就会造成不必要的线程开销，不过可以通过 &lt;strong&gt;线程池机制&lt;/strong&gt; 改善，线程池还可以让线程的创建和回收成本相对较低。使用&lt;code&gt;FixedThreadPool&lt;/code&gt; 可以有效的控制了线程的最大数量，保证了系统有限的资源的控制，实现了N(客户端请求数量):M(处理客户端请求的线程数量)的伪异步I/O模型（N 可以远远大于 M），下面一节”伪异步 BIO”中会详细介绍到。&lt;/p&gt;

&lt;h4 id=&quot;我们再设想一下当客户端并发访问量增加后这种模型会出现什么问题&quot;&gt;&lt;strong&gt;我们再设想一下当客户端并发访问量增加后这种模型会出现什么问题？&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;在 Java 虚拟机中，线程是宝贵的资源，线程的创建和销毁成本很高，除此之外，线程的切换成本也是很高的。尤其在 Linux 这样的操作系统中，线程本质上就是一个进程，创建和销毁线程都是重量级的系统函数。如果并发访问量增加会导致线程数急剧膨胀可能会导致线程堆栈溢出、创建新线程失败等问题，最终导致进程宕机或者僵死，不能对外提供服务。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;伪异步-io&quot;&gt;伪异步 IO&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了解决同步阻塞I/O面临的一个链路需要一个线程处理的问题，后来有人对它的线程模型进行了优化一一一后端通过一个线程池来处理多个客户端的请求接入，形成客户端个数M：线程池最大线程数N的比例关系，其中M可以远远大于N.通过线程池可以灵活地调配线程资源，设置线程的最大值，防止由于海量并发接入导致线程耗尽&lt;/p&gt;

&lt;p&gt;伪异步IO模型图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/伪异步io.png&quot; alt=&quot;伪异步io&quot; /&gt;&lt;/p&gt;

&lt;p&gt;采用线程池和任务队列可以实现一种叫做伪异步的 I/O 通信框架，它的模型图如上图所示。当有新的客户端接入时，将客户端的 Socket 封装成一个Task（该任务实现java.lang.Runnable接口）投递到后端的线程池中进行处理，JDK 的线程池维护一个消息队列和 N 个活跃线程，对消息队列中的任务进行处理。由于线程池可以设置消息队列的大小和最大线程数，因此，它的资源占用是可控的，无论多少个客户端并发访问，都不会导致资源的耗尽和宕机。&lt;/p&gt;

&lt;p&gt;伪异步I/O通信框架采用了线程池实现，因此避免了为每个请求都创建一个独立线程造成的线程资源耗尽问题。不过因为它的底层任然是同步阻塞的BIO模型，因此无法从根本上解决问题。&lt;/p&gt;

&lt;p&gt;在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;nio-new-io&quot;&gt;NIO (New I/O)&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。&lt;/p&gt;

&lt;p&gt;NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 &lt;code&gt;Socket&lt;/code&gt; 和 &lt;code&gt;ServerSocket&lt;/code&gt; 相对应的 &lt;code&gt;SocketChannel&lt;/code&gt; 和 &lt;code&gt;ServerSocketChannel&lt;/code&gt; 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NIO的特性/NIO与IO区别&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;non-blocking-io非阻塞io&quot;&gt;Non-blocking IO（非阻塞IO）&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;IO流是阻塞的，NIO流是不阻塞的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java NIO使我们可以进行非阻塞IO操作。比如说，单线程中从通道读取数据到buffer，同时可以继续做别的事情，当数据读取到buffer中后，线程再继续处理数据。写数据也是一样的。另外，非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。&lt;/p&gt;

&lt;p&gt;Java IO的各种流是阻塞的。这意味着，当一个线程调用 &lt;code&gt;read()&lt;/code&gt; 或 &lt;code&gt;write()&lt;/code&gt; 时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了&lt;/p&gt;

&lt;h4 id=&quot;buffer缓冲区&quot;&gt;Buffer(缓冲区)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;IO 面向流(Stream oriented)，而 NIO 面向缓冲区(Buffer oriented)。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Buffer是一个对象，它包含一些要写入或者要读出的数据。在NIO类库中加入Buffer对象，体现了新库与原I/O的一个重要区别。在面向流的I/O中·可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。&lt;/p&gt;

&lt;p&gt;在NIO厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的; 在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。&lt;/p&gt;

&lt;p&gt;最常用的缓冲区是 ByteBuffer,一个 ByteBuffer 提供了一组功能用于操作 byte 数组。除了ByteBuffer,还有其他的一些缓冲区，事实上，每一种Java基本类型（除了Boolean类型）都对应有一种缓冲区。&lt;/p&gt;

&lt;h4 id=&quot;channel-通道&quot;&gt;Channel (通道)&lt;/h4&gt;

&lt;p&gt;NIO 通过Channel（通道） 进行读写。&lt;/p&gt;

&lt;p&gt;通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能和Buffer交互。因为 Buffer，通道可以异步地读写。&lt;/p&gt;

&lt;h4 id=&quot;selectors选择器&quot;&gt;Selectors(选择器)&lt;/h4&gt;

&lt;p&gt;NIO有选择器，而IO没有。&lt;/p&gt;

&lt;p&gt;选择器用于使用单个线程处理多个通道。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。 因此，为了提高系统效率选择器是有用的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;nio-读数据和写数据方式&quot;&gt;NIO 读数据和写数据方式&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通常来说NIO中的所有IO都是从 Channel（通道） 开始的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。&lt;/li&gt;
  &lt;li&gt;从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据读取和写入操作图示：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;channel&lt;/code&gt; —»»&lt;code&gt;buffer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;channel&lt;/code&gt; ««—-&lt;code&gt;buffer&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;nio核心组件简单介绍&quot;&gt;NIO核心组件简单介绍&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NIO 包含下面几个核心的组件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Channel(通道)&lt;/li&gt;
  &lt;li&gt;Buffer(缓冲区)&lt;/li&gt;
  &lt;li&gt;Selector(选择器)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;整个NIO体系包含的类远远不止这三个，只能说这三个是NIO体系的“核心API”&lt;/p&gt;

&lt;h2 id=&quot;aio-asynchronous-io&quot;&gt;AIO (Asynchronous I/O)&lt;/h2&gt;

&lt;p&gt;AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。&lt;/p&gt;

&lt;p&gt;AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。（除了 AIO 其他的 IO 类型都是同步的，这一点可以从底层IO线程模型解释。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;从操作系统上理解&quot;&gt;从操作系统上理解&lt;/h4&gt;

&lt;p&gt;考虑下面两种情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用系统调用&lt;code&gt;read&lt;/code&gt;从socket里读取一段数据&lt;/li&gt;
  &lt;li&gt;用系统调用&lt;code&gt;read&lt;/code&gt;从一个磁盘文件读取一段数据到内存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于第一种情况，算作block，因为Linux无法知道网络上对方是否会发数据。如果没数据发过来，对于调用&lt;code&gt;read&lt;/code&gt;的程序来说，就只能“等”。&lt;/p&gt;

&lt;p&gt;对于第二种情况，&lt;strong&gt;不算做block&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于磁盘文件IO，Linux总是不视作Block&lt;/p&gt;

&lt;p&gt;一个解释是，所谓“Block”是指操作系统可以预见这个Block会发生才会主动Block。例如当读取TCP连接的数据时，如果发现Socket buffer里没有数据就可以确定定对方还没有发过来，于是Block；而对于普通磁盘文件的读写，也许磁盘运作期间会抖动，会短暂暂停，但是操作系统无法预见这种情况，只能视作不会Block，照样执行&lt;/p&gt;

&lt;p&gt;基于这个基本的设定，在讨论IO时，一定要严格区分网络IO和磁盘文件IO。NIO和后文讲到的IO多路复用只对网络IO有意义。&lt;/p&gt;

&lt;h1 id=&quot;bio&quot;&gt;BIO&lt;/h1&gt;

&lt;p&gt;有了Block的定义，就可以讨论BIO和NIO了。BIO是Blocking IO的意思。在类似于网络中进行&lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;connect&lt;/code&gt;一类的系统调用时会被卡住。&lt;/p&gt;

&lt;p&gt;举个例子，当用&lt;code&gt;read&lt;/code&gt;去读取网络的数据时，是无法预知对方是否已经发送数据的。因此在收到数据之前，能做的只有等待，直到对方把数据发过来，或者等到网络超时。&lt;/p&gt;

&lt;p&gt;对于单线程的网络服务，这样做就会有卡死的问题。因为当等待时，整个线程会被挂起，无法执行，也无法做其他的工作。&lt;/p&gt;

&lt;p&gt;这种Block是不会影响同时运行的其他程序（进程）的，因为现代操作系统都是多任务的，任务之间的切换是抢占式的。这里Block只是指Block当前的进程。&lt;/p&gt;

&lt;p&gt;网络服务为了同时响应多个并发的网络请求，必须实现为多线程的。每个线程处理一个网络请求。线程数随着并发连接数线性增长。这的确能奏效。实际上2000年之前很多网络服务器就是这么实现的。但这带来两个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;线程越多，Context Switch就越多，而Context Switch是一个比较重的操作，会无谓浪费大量的CPU。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每个线程会占用一定的内存作为线程的栈。比如有1000个线程同时运行，每个占用1MB内存，就占用了1个G的内存。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;问题的关键在于，当调用&lt;code&gt;read&lt;/code&gt;接受网络请求时，有数据到了就用，没数据到时，实际上是可以干别的。使用大量线程，仅仅是因为Block发生，没有其他办法。&lt;/p&gt;

&lt;p&gt;当然你可能会说，是不是可以弄个线程池呢？这样既能并发的处理请求，又不会产生大量线程。但这样会限制最大并发的连接数。比如你弄4个线程，那么最大4个线程都Block了就没法响应更多请求了。&lt;/p&gt;

&lt;p&gt;要是操作IO接口时，操作系统能够总是直接告诉有没有数据，而不是Block去等就好了。于是，NIO登场&lt;/p&gt;

&lt;h1 id=&quot;nio&quot;&gt;NIO&lt;/h1&gt;

&lt;p&gt;NIO是指将IO模式设为“Non-Blocking”模式。在Linux下，一般是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;void setnonblocking(int fd) {
    int flags = fcntl(fd, F_GETFL, 0);
    fcntl(fd, F_SETFL, flags | O_NONBLOCK);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在BIO模式下，调用read，如果发现没数据已经到达，就会Block住。&lt;/p&gt;

&lt;p&gt;在NIO模式下，调用read，如果发现没数据已经到达，就会立刻返回-1, 并且errno被设为&lt;code&gt;EAGAIN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;于是，一段NIO的代码，大概就可以写成这个样子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct timespec sleep_interval{.tv_sec = 0, .tv_nsec = 1000};
ssize_t nbytes;
while (1) {
    /* 尝试读取 */
    if ((nbytes = read(fd, buf, sizeof(buf))) &amp;lt; 0) {
        if (errno == EAGAIN) { // 没数据到
            perror(&quot;nothing can be read&quot;);
        } else {
            perror(&quot;fatal error&quot;);
            exit(EXIT_FAILURE);
        }
    } else { // 有数据
        process_data(buf, nbytes);
    }
    // 处理其他事情，做完了就等一会，再尝试
    nanosleep(sleep_interval, NULL);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码很容易理解，就是轮询，不断的尝试有没有数据到达，有了就处理，没有(得到&lt;code&gt;EWOULDBLOCK&lt;/code&gt;或者&lt;code&gt;EAGAIN&lt;/code&gt;)就等一小会再试。这比之前BIO好多了，起码程序不会被卡死了&lt;/p&gt;

&lt;p&gt;但这样会带来两个新问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果有大量文件描述符都要等，那么就得一个一个的read。这会带来大量的Context Switch（&lt;code&gt;read&lt;/code&gt;是系统调用，每调用一次就得在用户态和核心态切换一次）&lt;/li&gt;
  &lt;li&gt;休息一会的时间不好把握。这里是要猜多久之后数据才能到。等待时间设的太长，程序响应延迟就过大；设的太短，就会造成过于频繁的重试，干耗CPU而已。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要是操作系统能一口气告诉程序，哪些数据到了就好了。&lt;/p&gt;

&lt;p&gt;于是IO多路复用被搞出来解决这个问题&lt;/p&gt;

&lt;h1 id=&quot;io多路复用&quot;&gt;IO多路复用&lt;/h1&gt;

&lt;p&gt;IO多路复用（IO Multiplexing) 是这么一种机制：程序注册一组socket文件描述符给操作系统，表示“我要监视这些fd是否有IO事件发生，有了就告诉程序处理”。&lt;/p&gt;

&lt;p&gt;IO多路复用是要和NIO一起使用的。尽管在操作系统级别，NIO和IO多路复用是两个相对独立的事情。NIO仅仅是指IO API总是能立刻返回，不会被Blocking；而IO多路复用仅仅是操作系统提供的一种便利的通知机制。操作系统并不会强制这俩必须得一起用——你可以用NIO，但不用IO多路复用，就像上一节中的代码；也可以只用IO多路复用 + BIO，这时效果还是当前线程被卡住。但是，&lt;strong&gt;IO多路复用和NIO是要配合一起使用才有实际意义&lt;/strong&gt;。因此，在使用IO多路复用之前，请总是先把fd设为&lt;code&gt;O_NONBLOCK&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对IO多路复用，还存在一些常见的误解，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;❌IO多路复用是指多个数据流共享同一个Socket&lt;/strong&gt;。其实IO多路复用说的是多个Socket，只不过操作系统是一起监听他们的事件而已。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;多个数据流共享同一个TCP连接的场景的确是有，比如Http2 Multiplexing就是指Http2通讯中中多个逻辑的数据流共享同一个TCP连接。但这与IO多路复用是完全不同的问题。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;❌IO多路复用是NIO，所以总是不Block的&lt;/strong&gt;。其实IO多路复用的关键API调用(&lt;code&gt;select&lt;/code&gt;，&lt;code&gt;poll&lt;/code&gt;，&lt;code&gt;epoll_wait&lt;/code&gt;）总是Block的，正如下文的例子所讲。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;❌&lt;strong&gt;IO多路复用和NIO一起减少了IO&lt;/strong&gt;。实际上，IO本身（网络数据的收发）无论用不用IO多路复用和NIO，都没有变化。请求的数据该是多少还是多少；网络上该传输多少数据还是多少数据。IO多路复用和NIO一起仅仅是解决了调度的问题，避免CPU在这个过程中的浪费，使系统的瓶颈更容易触达到网络带宽，而非CPU或者内存。要提高IO吞吐，还是提高硬件的容量（例如，用支持更大带宽的网线、网卡和交换机）和依靠并发传输（例如HDFS的数据多副本并发传输&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;操作系统级别提供了一些接口来支持IO多路复用，最老掉牙的是&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;select&quot;&gt;select&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;select&lt;/code&gt;长这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它接受3个文件描述符的数组，分别监听读取(&lt;code&gt;readfds&lt;/code&gt;)，写入(&lt;code&gt;writefds&lt;/code&gt;)和异常(&lt;code&gt;expectfds&lt;/code&gt;)事件。那么一个 IO多路复用的代码大概是这样&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct timeval tv = {.tv_sec = 1, .tv_usec = 0};

ssize_t nbytes;
while(1) {
    FD_ZERO(&amp;amp;read_fds);
    setnonblocking(fd1);
    setnonblocking(fd2);
    FD_SET(fd1, &amp;amp;read_fds);
    FD_SET(fd2, &amp;amp;read_fds);
    // 把要监听的fd拼到一个数组里，而且每次循环都得重来一次...
    if (select(FD_SETSIZE, &amp;amp;read_fds, NULL, NULL, &amp;amp;tv) &amp;lt; 0) { // block住，直到有事件到达
        perror(&quot;select出错了&quot;);
        exit(EXIT_FAILURE);
    }
    for (int i = 0; i &amp;lt; FD_SETSIZE; i++) {
        if (FD_ISSET(i, &amp;amp;read_fds)) {
            /* 检测到第[i]个读取fd已经收到了，这里假设buf总是大于到达的数据，所以可以一次read完 */
            if ((nbytes = read(i, buf, sizeof(buf))) &amp;gt;= 0) {
                process_data(nbytes, buf);
            } else {
                perror(&quot;读取出错了&quot;);
                exit(EXIT_FAILURE);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先，为了&lt;code&gt;select&lt;/code&gt;需要构造一个fd数组（这里为了简化，没有构造要监听写入和异常事件的fd数组）。之后，用&lt;code&gt;select&lt;/code&gt;监听了&lt;code&gt;read_fds&lt;/code&gt;中的多个socket的读取时间。调用&lt;code&gt;select&lt;/code&gt;后，程序会Block住，直到一个事件发生了，或者等到最大1秒钟(&lt;code&gt;tv&lt;/code&gt;定义了这个时间长度）就返回。之后，需要遍历所有注册的fd，挨个检查哪个fd有事件到达(&lt;code&gt;FD_ISSET&lt;/code&gt;返回true)。如果是，就说明数据已经到达了，可以读取fd了。读取后就可以进行数据的处理。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;select&lt;/code&gt;有一些发指的缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;select&lt;/code&gt;能够支持的最大的fd数组的长度是1024。这对要处理高并发的web服务器是不可接受的。&lt;/li&gt;
  &lt;li&gt;fd数组按照监听的事件分为了3个数组，为了这3个数组要分配3段内存去构造，而且每次调用&lt;code&gt;select&lt;/code&gt;前都要重设它们（因为&lt;code&gt;select&lt;/code&gt;会改这3个数组)；调用&lt;code&gt;select&lt;/code&gt;后，这3数组要从用户态复制一份到内核态；事件到达后，要遍历这3数组。很不爽。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;select&lt;/code&gt;返回后要挨个遍历fd，找到被“SET”的那些进行处理。这样比较低效。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;select&lt;/code&gt;是无状态的，即每次调用&lt;code&gt;select&lt;/code&gt;，内核都要重新检查所有被注册的fd的状态。&lt;code&gt;select&lt;/code&gt;返回后，这些状态就被返回了，内核不会记住它们；到了下一次调用，内核依然要重新检查一遍。于是查询的效率很低。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;poll&quot;&gt;poll&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;poll&lt;/code&gt;与&lt;code&gt;select&lt;/code&gt;类似于。它大概长这样&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CQL&quot;&gt;int poll(struct pollfd *fds, nfds_t nfds, int timeout);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;poll&lt;/code&gt;的代码例子和&lt;code&gt;select&lt;/code&gt;差不多，因此也就不赘述了。有意思的是&lt;code&gt;poll&lt;/code&gt;这个单词的意思是“轮询”，所以很多中文资料都会提到对IO进行“轮询”。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;poll&lt;/code&gt;优化了&lt;code&gt;select&lt;/code&gt;的一些问题。比如不再有3个数组，而是1个&lt;code&gt;polldfd&lt;/code&gt;结构的数组了，并且也不需要每次重设了。数组的个数也没有了1024的限制。但其他的问题依旧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;依然是无状态的，性能的问题与&lt;code&gt;select&lt;/code&gt;差不多一样；&lt;/li&gt;
  &lt;li&gt;应用程序仍然无法很方便的拿到那些“有事件发生的fd“，还是需要遍历所有注册的fd。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前来看，高性能的web服务器都不会使用&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;。他们俩存在的意义仅仅是“兼容性”，因为很多操作系统都实现了这两个系统调用。&lt;/p&gt;

&lt;p&gt;如果是追求性能的话，在BSD/macOS上提供了kqueue api；在Salorias中提供了/dev/poll（可惜该操作系统已经凉凉)；而在Linux上提供了epoll api。它们的出现彻底解决了&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;的问题。Java NIO，nginx等在对应的平台的上都是使用这些api实现。&lt;/p&gt;

&lt;p&gt;因为大部分情况下我会用Linux做服务器，所以下文以Linux epoll为例子来解释多路复用是怎么工作的。&lt;/p&gt;

&lt;h1 id=&quot;用epoll实现的io多路复用&quot;&gt;用epoll实现的IO多路复用&lt;/h1&gt;

&lt;p&gt;epoll是Linux下的IO多路复用的实现。这里单开一章是因为它非常有代表性，并且Linux也是目前最广泛被作为服务器的操作系统。细致的了解epoll对整个IO多路复用的工作原理非常有帮助。&lt;/p&gt;

&lt;p&gt;与&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;不同，要使用epoll是需要先创建一下的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;int epfd = epoll_create(10);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;epoll_create&lt;/code&gt;在内核层创建了一个数据表，接口会返回一个“epoll的文件描述符”指向这个表。注意，接口参数是一个表达要监听事件列表的长度的数值。但不用太在意，因为epoll内部随后会根据事件注册和事件注销动态调整epoll中表格的大小。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/epoll.png&quot; alt=&quot;epoll&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么epoll要创建一个用文件描述符来指向的表呢？这里有两个好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;epoll是有状态的，不像&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;那样每次都要重新传入所有要监听的fd，这避免了很多无谓的数据复制。epoll的数据是用接口&lt;code&gt;epoll_ctl&lt;/code&gt;来管理的（增、删、改）。&lt;/li&gt;
  &lt;li&gt;epoll文件描述符在进程被fork时，子进程是可以继承的。这可以给对多进程共享一份epoll数据，实现并行监听网络请求带来便利。但这超过了本文的讨论范围，就此打住。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;epoll创建后，第二步是使用&lt;code&gt;epoll_ctl&lt;/code&gt;接口来注册要监听的事件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中第一个参数就是上面创建的&lt;code&gt;epfd&lt;/code&gt;。第二个参数&lt;code&gt;op&lt;/code&gt;表示如何对文件名进行操作，共有3种。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;EPOLL_CTL_ADD&lt;/code&gt; - 注册一个事件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;EPOLL_CTL_DEL&lt;/code&gt; - 取消一个事件的注册&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;EPOLL_CTL_MOD&lt;/code&gt; - 修改一个事件的注册&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第三个参数是要操作的fd，这里必须是支持NIO的fd（比如socket）。第四个参数是一个&lt;code&gt;epoll_event&lt;/code&gt;的类型的数据，表达了注册的事件的具体信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;typedef union epoll_data {
    void    *ptr;
    int      fd;
    uint32_t u32;
    uint64_t u64;
} epoll_data_t;

struct epoll_event {
    uint32_t     events;    /* Epoll events */
    epoll_data_t data;      /* User data variable */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比方说，想关注一个fd1的读取事件事件，并采用边缘触发(下文会解释什么是边缘触发），大概要这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct epoll_data ev;
ev.events = EPOLLIN | EPOLLET; // EPOLLIN表示读事件；EPOLLET表示边缘触发
ev.data.fd = fd1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过&lt;code&gt;epoll_ctl&lt;/code&gt;就可以灵活的注册/取消注册/修改注册某个fd的某些事件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/epoll_ctl.png&quot; alt=&quot;epoll_ctl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三步，使用&lt;code&gt;epoll_wait&lt;/code&gt;来等待事件的发生&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CQL&quot;&gt;int epoll_wait(int epfd, struct epoll_event *evlist, int maxevents, int timeout);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特别留意，这一步是”block”的。只有当注册的事件至少有一个发生，或者&lt;code&gt;timeout&lt;/code&gt;达到时，该调用才会返回。这与&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;几乎一致。但不一样的地方是&lt;code&gt;evlist&lt;/code&gt;，它是&lt;code&gt;epoll_wait&lt;/code&gt;的返回数组，里面&lt;strong&gt;只包含那些被触发的事件对应的fd&lt;/strong&gt;，而不是像&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;那样返回所有注册的fd。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/epoll_wait.png&quot; alt=&quot;epoll_wait&quot; /&gt;&lt;/p&gt;

&lt;p&gt;综合起来，一段比较完整的epoll代码大概是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#define MAX_EVENTS 10
struct epoll_event ev, events[MAX_EVENTS];
int nfds, epfd, fd1, fd2;

// 假设这里有两个socket，fd1和fd2，被初始化好。
// 设置为non blocking
setnonblocking(fd1);
setnonblocking(fd2);

// 创建epoll
epfd = epoll_create(MAX_EVENTS);
if (epollfd == -1) {
    perror(&quot;epoll_create1&quot;);
    exit(EXIT_FAILURE);
}

//注册事件
ev.events = EPOLLIN | EPOLLET;
ev.data.fd = fd1;
if (epoll_ctl(epollfd, EPOLL_CTL_ADD, fd1, &amp;amp;ev) == -1) {
    perror(&quot;epoll_ctl: error register fd1&quot;);
    exit(EXIT_FAILURE);
}
if (epoll_ctl(epollfd, EPOLL_CTL_ADD, fd2, &amp;amp;ev) == -1) {
    perror(&quot;epoll_ctl: error register fd2&quot;);
    exit(EXIT_FAILURE);
}

// 监听事件
for (;;) {
    nfds = epoll_wait(epdf, events, MAX_EVENTS, -1);
    if (nfds == -1) {
        perror(&quot;epoll_wait&quot;);
        exit(EXIT_FAILURE);
    }

    for (n = 0; n &amp;lt; nfds; ++n) { // 处理所有发生IO事件的fd
        process_event(events[n].data.fd);
        // 如果有必要，可以利用epoll_ctl继续对本fd注册下一次监听，然后重新epoll_wait
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所有的基于IO多路复用的代码都会遵循这样的写法：注册——监听事件——处理——再注册，无限循环下去。&lt;/p&gt;</content><author><name></name></author><category term="JAVA" /><summary type="html">Java 中的 BIO、NIO和 AIO 理解为是 Java 语言对操作系统的各种 IO 模型的封装。程序员在使用这些 API 的时候，不需要关心操作系统层面的知识，也不需要根据不同操作系统编写不同的代码。只需要使用Java的API就可以了</summary></entry><entry><title type="html">git常用命令</title><link href="http://localhost:4000/_posts/2020-05-08-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" rel="alternate" type="text/html" title="git常用命令" /><published>2020-05-08T00:00:00+08:00</published><updated>2020-05-08T00:00:00+08:00</updated><id>http://localhost:4000/_posts/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4</id><content type="html" xml:base="http://localhost:4000/_posts/2020-05-08-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">&lt;p&gt;&lt;img src=&quot;/img/git.png&quot; alt=&quot;git&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;workspace&lt;/code&gt;：工作区&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;index/stage&lt;/code&gt;：暂存区&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;repository&lt;/code&gt;:厂库区&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;remoter&lt;/code&gt;远程厂库&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Git的设置文件为&lt;code&gt;.gitconfig&lt;/code&gt;，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#查看配置
git config --list

#编辑配置
git config -e [--global]

#设置提交代码用户配置
git config --global user.name  &quot;[name]&quot;
git config --global user.email &quot;[email address]&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;创建代码库&quot;&gt;创建代码库&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git init
git clone  url
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;增加删除&quot;&gt;增加/删除&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#添加到暂存区
git add file  

#添加指定目录到暂存区
git add  dir

#添加当前目录所有文件到暂存区
git add . 

#对于同一个文件的多处变化，可以实现分次提交
git add -p

# 删除工作区文件，并且将这次删除放入暂存区
git rm [file1] [file2]

# 停止追踪指定文件，但该文件会保留在工作区
git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
git mv [file-original] [file-renamed]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;代码提交&quot;&gt;代码提交&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# 提交暂存区到仓库区
git commit -m [message]

# 提交暂存区的指定文件到仓库区
git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
git commit -a

# 提交时显示所有diff信息
git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
git commit --amend [file1] [file2] 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;分支&quot;&gt;分支&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;
# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]

# 本地存在一个分支，名称叫：develop_chen，但远程没有怎么办？

git push origin develop_chen

这样就在远程建立一个和本地一样的分支 

git branch --set-upstream-to=origin/develop  develop  本地分支和远程分支简历跟踪关系
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;标签&quot;&gt;标签&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;查看信息&quot;&gt;查看信息&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的代码差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog

# 从本地master拉取代码更新当前分支：branch 一般为master
$ git rebase [branch]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;远程同步&quot;&gt;远程同步&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ git remote update  --更新远程仓储
# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;撤销&quot;&gt;撤销&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;合并&quot;&gt;合并&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git checkout dev           #切换到dev开发分支
git pull
git checkout master
git merge dev              #合并dev分支到master上
git push origin master     #将代码推到master上
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="git" /><summary type="html"></summary></entry></feed>